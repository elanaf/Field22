[["index.html", "A Minimal Book Example Chapter 1 About", " A Minimal Book Example John Doe 2023-04-27 Chapter 1 About This is the final project for Reproducible Data Science 2023. bookdown::render_book() bookdown::serve_book() "],["my-database-structure.html", "Chapter 2 My database structure 2.1 Overview 2.2 Introduction to my data 2.3 Creating the database 2.4 Import data", " Chapter 2 My database structure 2.1 Overview The first step in preparing my data to be used as the final project of Reproducible Data Science 2023 was to create a database in R using RSQLite. The following code is an edited version of the code I used in Assignment 4. 2.2 Introduction to my data 2.2.1 My thesis All the data used in this project comes from my 2022 field experiment, conducted at both Utah Lake and the Great Salt Lake. For my thesis, I am studying whether changes in the seeding density or functional diversity of my native seed mixes alter their biotic resistance (their ability to prevent invasive plants from entering the study area). There are two leading theories about biotic resistance. Some ecologists believe that native plants that are most similar to the invasive plants of interest (in my case, Phragmites australis) will do the best at resisting the invader due to limiting similarity. In my case, this would mean that grasses do the best at resisting Phragmites growth. Other scientists believe that native plants that use the most resources and fill the most niche space will do the best at resisting invasives due to niche complementarity. In my case, this would be annual forbs because they grow the fastest and pre-empt the most light due to their large leaves. 2.2.2 My treatments I conducted a full factorial experiment examining two levels of density (high and low) and five functional groups (grasses, bulrushes, rushes, annual forbs, and perennial forbs). On a bi-weekly basis, I collected canopy cover data within each plot to determine whether any of my treatments were particularly successful to preventing Phragmites and other invasives from entering. 2.2.3 My tables For this project, I will be using two tables. Although I had three tables in my Assignment 4, I will not be incorporating any biomass data into my analyses. My first table is called “cover”. This table includes all the canopy cover estimates from my bi-weekly surveys. The second table is called “functional group”. This data keeps track of which functional groups are represented by each of my 10 seed mixes. knitr::include_graphics(&quot;Feldman_database_structure_updated.png&quot;) Figure 2.1: Database structure diagram 2.3 Creating the database 2.3.1 Getting started The first step in creating a database is to install and load the DBI package. library(DBI) Now we are ready to create the database and link it to SQL. field_db &lt;- dbConnect(RSQLite::SQLite(), &quot;field.db&quot;) 2.3.2 Cover Now we can make the “cover” table. As stated above, this table has all the data related to my canopy cover surveys. The first step is to create the table. We will add the data to the table later. The columns in this table will include plot_id (an individual identifier of each plot made up of 1-3 characters), seed_mix (a tag to reference the seed mix used in the plot), density (either high ‘H’ or low ‘L’), block (a number 1-6, referring to the replicate number), date, and the cover estimate of several species. Plot_id is the primary key. For this chapter, solely for the purpose of saving time and space, I will only be showing columns for 5 species of interest. When analyzing and visualizing my data, I will include the full list of species observed in my plots. Below is the RSQLite code to create the “cover” table. #create all tables and enforce relationships dbExecute(field_db, &quot;CREATE TABLE cover ( plot_id varchar(3) NOT NULL, seed_mix varchar(2) NOT NULL, density char(1) NOT NULL, block char(1) NOT NULL, date text, PHAU_cover varchar(2), DISP_cover varchar(2), EUOC_cover varchar(2), SCAM_cover varchar(2), BICE_cover varchar(2), PRIMARY KEY (plot_id) );&quot;) 2.3.3 Functional groups Now, we can make the “functional group” table. This table relates the functional groups of interest in my research to each of the 10 seed mixes used in my experiment. This table includes a group id (an individual marker for each functional group in the table), seed mix (referring to the seed mix I planted in my research), and the group (the functional group related to the seed mix). The group id is the primary key for this table. The seed mix is a foreign key that references the column “seed_mix” in the cover table. dbExecute(field_db, &quot;CREATE TABLE functional_group ( group_id char(1) NOT NULL, seed_mix varchar(2) NOT NULL, grp varchar(20), PRIMARY KEY (group_id) FOREIGN KEY (seed_mix) REFERENCES cover(seed_mix) );&quot;) 2.4 Import data The next step is to input the data into the tables we just created. Let’s start with the cover table. The first step is to import the csv of my data. cover &lt;- read.csv(&quot;/Users/elanafeldman/Documents/USUClasses/Thesis_Code/Field22/fb_sql.csv&quot;) The csv includes all the data I want in my table except for the individual plot_id. Let’s make that now. cover$plot_id &lt;- 1:nrow(cover) Next we can join this new column tos the csv data and change all the names of the columns so that they match the names of the columns in the SQL table. cover &lt;- cover[,c(&quot;plot_id&quot;, &quot;Group&quot;, &quot;Density&quot;, &quot;Block&quot;, &quot;Date&quot;, &quot;PHAU&quot;, &quot;DISP&quot;, &quot;EUOC&quot;, &quot;SCAM&quot;, &quot;BICE&quot;)] names(cover)[2:10] &lt;- c(&quot;seed_mix&quot;, &quot;density&quot;, &quot;block&quot;, &quot;date&quot;, &quot;PHAU_cover&quot;, &quot;DISP_cover&quot;, &quot;EUOC_cover&quot;, &quot;SCAM_cover&quot;, &quot;BICE_cover&quot;) Now we can put all the data into the table! dbWriteTable(field_db, &quot;cover&quot;, cover, append = TRUE) Finally, we can check that it all worked by making a query. dbGetQuery(field_db, &quot;SELECT * FROM cover LIMIT 10;&quot;) Now let’s do it all again for the functional group table. functional_group &lt;- read.csv(&quot;/Users/elanafeldman/Documents/USUClasses/Thesis_Code/Field22/functional_group.csv&quot;) functional_group$group_id &lt;- 1:nrow(functional_group) functional_group &lt;- functional_group[,c(&quot;group_id&quot;, &quot;seed_mix&quot;, &quot;grp&quot;)] dbWriteTable(field_db, &quot;functional_group&quot;, functional_group, append = TRUE) dbGetQuery(field_db, &quot;SELECT * FROM functional_group LIMIT 10;&quot;) "],["cleaning-my-data.html", "Chapter 3 Cleaning my data 3.1 Overview of the Chapter 3.2 Overview of My Data 3.3 Importing the data 3.4 Cleaning the data", " Chapter 3 Cleaning my data 3.1 Overview of the Chapter The first step was to clean all my data. These data were collected in the field and then entered into Excel spreadsheets, which were then exported as CSVs to be imported into R. My main tasks related to data cleaning were to fix column names and change column values so that they represent proportions instead of percents. 3.2 Overview of My Data The values collected in this experiment were percent cover of each species present in my 1m plot. Although the data are technically in cover class (&lt;1, 1-10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-90, &gt;99), data were written down as a single number meant to represent the lower value of the cover class (&lt;1, 10, 20, 30, 40, 50, 60, 70, 80, 90, &gt;99). For my data analyses, I will use the mid-point of the cover classes (5, 15, 25, 35, 45, 55, 65, 75, 85, 95). I intend to use the beta distribution for my analyses, and therefore need to nudge my upper and lower bounds into values between 0 and 1 (&lt;1 -&gt; 0.005, &gt;99 -&gt; .999). 3.3 Importing the data I have two different spreadsheets, each representing one of my field sites. Both will be cleaned in the same way, but first I need to import the data and load all my packages. #Load packages library(tidyverse) ## ── Attaching packages ───────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.3.6 ✔ purrr 0.3.4 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.10 ## ✔ tidyr 1.2.1 ✔ stringr 1.4.1 ## ✔ readr 2.1.2 ✔ forcats 0.5.2 ## ── Conflicts ──────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(lubridate) #my version of tidyverse does not seem to include lubridate ## ## Attaching package: &#39;lubridate&#39; ## ## The following objects are masked from &#39;package:base&#39;: ## ## date, intersect, setdiff, union #Import data fb &lt;- read.csv(&quot;../../Cleaned-Data/clean_fb.csv&quot;) ul &lt;- read.csv(&quot;../../Cleaned-Data/clean_ul.csv&quot;) 3.4 Cleaning the data To begin, I will start by working with fb, which is all my data from Farmington Bay. One of the columns in my table is Date, which is the date of sampling. class(fb$Date) ## [1] &quot;character&quot; R is reading my date column as a character string! I need to fix this using lubridate so that R understands that my dates are dates. fb$Date &lt;- lubridate::mdy(fb$Date) class(fb$Date) ## [1] &quot;Date&quot; Now I can move on to fixing my column names. When I glimpse my column names, I can see that not all of them make sense. dplyr::glimpse(fb) ## Rows: 330 ## Columns: 31 ## $ Block...FB &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2,… ## $ Plot &lt;chr&gt; &quot;5H&quot;, &quot;1L&quot;, &quot;2L&quot;, &quot;4L&quot;, &quot;3L&quot;, &quot;4H&quot;, &quot;5L&quot;, &quot;C&quot;, &quot;1H&quot;, &quot;2H… ## $ Group &lt;chr&gt; &quot;5&quot;, &quot;1&quot;, &quot;2&quot;, &quot;4&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;C&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;… ## $ Density &lt;chr&gt; &quot;H&quot;, &quot;L&quot;, &quot;L&quot;, &quot;L&quot;, &quot;L&quot;, &quot;H&quot;, &quot;L&quot;, &quot;C&quot;, &quot;H&quot;, &quot;H&quot;, &quot;H&quot;, &quot;… ## $ Date &lt;date&gt; 2022-07-27, 2022-07-27, 2022-07-27, 2022-07-27, 2022-07… ## $ Total.Cover &lt;chr&gt; &quot;0&quot;, &quot;0&quot;, &quot;0&quot;, &quot;1&quot;, &quot;0&quot;, &quot;1&quot;, &quot;0&quot;, &quot;0&quot;, &quot;0&quot;, &quot;0&quot;, &quot;1&quot;, &quot;… ## $ PHAU &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&lt;1&quot;, &quot;&quot;, &quot;&quot;… ## $ Cheno &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ Typha &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ BOMA &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;1&quot;, &quot;&quot;, &quot;1&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;1&quot;, &quot;&quot;, &quot;&quot;, &quot;… ## $ DISP &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ EUMA &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ SYCI &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ LEFA &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ SCAC &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ BICE &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ BIFR &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ EUOC &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ MUAS &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ SCAM &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ RUMA &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ RUST &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ Unk_Forb &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ Unk_Grass &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ Unk_Rush &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&lt;1&quot;, &quot;&quot;, &quot;&quot;… ## $ SARU &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ Tamarisk &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ Notes &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, … ## $ Measurement.1 &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ Measurement.2 &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ Measurement.3 &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… My first column name is coming up as Block…FB. This column name does not follow the conventions we learned in class and it too complicated to type. I will change it to simply say Block. I also need to change the column Unk_Rush to be called Unk_Bulrush names(fb)[1] &lt;- &quot;Block&quot; names(fb)[25] &lt;- &quot;Unk_Bulrush&quot; The most difficult part of cleaning my data is making sure all the cover values have been entered properly. Let’s start by looking at the values in a random column. unique(fb$BOMA) ## [1] &quot;&quot; &quot;1&quot; &quot;&lt;1&quot; &quot;10&quot; &quot;20&quot; We have a couple of problems here. First of all, the values are all being read as characters instead of numbers. This is because of my values that reads “&lt;1”. My first step will be to replace this value with a trace value that can be used in statistical analyses (typically one half of the smallest recorded value). After replacing that value, I will be able to change all these values into numeric values so they are no longer characters. This will also help to change my “” values to NA values. Next, my larger values were entered into the spreadsheet as percentages (10 = 10%, 20 = 20%). To perform my statistical analyses, these will need to be changes into proportions (10 -&gt; .1, 20 -&gt; .2). Finally, I want all my values to be on the mid-point of their cover class, not the bottom. Therefore, everything needs to increase by 0.05 (.1 -&gt; .15, .2 -&gt; .25). fb &lt;- fb %&gt;% mutate(Total.Cover = case_when( Total.Cover == &quot;&lt;1&quot; ~ 0.005, #change all the &lt;1 to the trace value of 0.005 Total.Cover == &quot;1&quot; ~ 0.05, #change the 1s to 0.05 (because too small to work below) #all other numbers can stay as they are but numeric #but add 5 so they are at the mid-point of the cover class #and then divide them by 100 so they are proportions TRUE ~ (as.numeric(Total.Cover) + 5)/100 )) ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion Now I just need to repeat this for all the columns between Total.Cover and Tamarisk. I originally tried to do this through a loop so I wouldn’t need to copy and paste for each column, but unfortunately I could not get the loop to run in time. That can be a future project for me! fb &lt;- fb %&gt;% mutate(PHAU = case_when( PHAU == &quot;&lt;1&quot; ~ 0.005, PHAU == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(PHAU) + 5)/100 ), Cheno = case_when( Cheno == &quot;&lt;1&quot; ~ 0.005, Cheno == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(Cheno) + 5)/100), Typha = case_when( Typha == &quot;&lt;1&quot; ~ 0.005, Typha == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(Typha) + 5)/100), BOMA = case_when( BOMA == &quot;&lt;1&quot; ~ 0.005, BOMA == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(BOMA) + 5)/100), DISP = case_when( DISP == &quot;&lt;1&quot; ~ 0.005, DISP == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(DISP) + 5)/100), EUMA = case_when( EUMA == &quot;&lt;1&quot; ~ 0.005, EUMA == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(EUMA) + 5)/100), SYCI = case_when( SYCI == &quot;&lt;1&quot; ~ 0.005, SYCI == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(SYCI) + 5)/100), LEFA = case_when( LEFA == &quot;&lt;1&quot; ~ 0.005, LEFA == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(LEFA) + 5)/100), SCAC = case_when( SCAC == &quot;&lt;1&quot; ~ 0.005, SCAC == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(SCAC) + 5)/100), BICE = case_when( BICE == &quot;&lt;1&quot; ~ 0.005, BICE == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(BICE) + 5)/100), BIFR = case_when( BIFR == &quot;&lt;1&quot; ~ 0.005, BIFR == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(BIFR) + 5)/100), EUOC = case_when( EUOC == &quot;&lt;1&quot; ~ 0.005, EUOC == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(EUOC) + 5)/100), MUAS = case_when( MUAS == &quot;&lt;1&quot; ~ 0.005, MUAS == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(MUAS) + 5)/100), SCAM = case_when( SCAM == &quot;&lt;1&quot; ~ 0.005, SCAM == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(SCAM) + 5)/100), RUMA = case_when( RUMA == &quot;&lt;1&quot; ~ 0.005, RUMA == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(RUMA) + 5)/100), RUST = case_when( RUST == &quot;&lt;1&quot; ~ 0.005, RUST == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(RUST) + 5)/100), Unk_Forb = case_when( Unk_Forb == &quot;&lt;1&quot; ~ 0.005, Unk_Forb == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(Unk_Forb) + 5)/100), Unk_Grass = case_when( Unk_Grass == &quot;&lt;1&quot; ~ 0.005, Unk_Grass == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(Unk_Grass) + 5)/100), Unk_Bulrush = case_when( Unk_Bulrush == &quot;&lt;1&quot; ~ 0.005, Unk_Bulrush == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(Unk_Bulrush) + 5)/100), SARU = case_when( SARU == &quot;&lt;1&quot; ~ 0.005, SARU == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(SARU) + 5)/100), Tamarisk = case_when( Tamarisk == &quot;&lt;1&quot; ~ 0.005, Tamarisk == &quot;1&quot; ~ 0.05, TRUE ~ (as.numeric(Tamarisk) + 5)/100) ) ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion ## Warning in eval_tidy(pair$rhs, env = default_env): NAs introduced by coercion Now we can go in and do the same to the ul spreadsheet. Once we are done, the next step is visualizing our data! "],["visualizing-my-data.html", "Chapter 4 Visualizing my data 4.1 Overview of Chapter 4.2 Organizing the data 4.3 Graphing the data 4.4 Combine", " Chapter 4 Visualizing my data 4.1 Overview of Chapter Now that my data is clean, I can start to make graphs to find the story! For my thesis, I am interested in seeing differences in invasive plant cover as a result of the seed mix used in the plot. To do this, I will make a graph that includes invasive and native cover and look for relationships between the two. 4.2 Organizing the data Currently, I have one column for each species seen in the field. However, I want to graph the total cover for all native and invasive plants seen in the plots. But how do I know which ones are native? To start, I need to change my data from wide format to long format and make a new column that identifies which species is native and which is invasive. Plus, I only need to know this information for the last sampling date. #load packages library(ggplot2) library(tidyverse) graph_data &lt;-fb %&gt;% select(Block, Plot, Group, Density, Date, PHAU, Cheno, Typha, BOMA, DISP, EUMA, SYCI, LEFA, SCAC, BICE, BIFR, EUOC, MUAS, SCAM, RUMA, RUST, Unk_Bulrush, SARU, Tamarisk) %&gt;% #remove unnecessary columns filter(Date == &quot;2022-09-16&quot;) %&gt;% #only the last sampling date pivot_longer( cols = 6:24, names_to = &quot;SPP&quot;, values_to = &quot;Percent_Cover&quot; ) %&gt;% #pivot so that all species names are in one column mutate(Status = dplyr::if_else( SPP %in% c(&quot;PHAU&quot;, &quot;Typha&quot;, &quot;RUST&quot;, &quot;Tamarisk&quot;), &quot;Invasive&quot;, &quot;Native&quot;)) %&gt;% #make a new column for species status group_by(Block, Plot, Status) %&gt;% #group by the plot and species status summarise(PC = sum(Percent_Cover, na.rm = TRUE)) #calculate totals ## `summarise()` has grouped output by &#39;Block&#39;, &#39;Plot&#39;. You ## can override using the `.groups` argument. #Check out the results head(graph_data) ## # A tibble: 6 × 4 ## # Groups: Block, Plot [3] ## Block Plot Status PC ## &lt;int&gt; &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 1H Invasive 0.05 ## 2 1 1H Native 0.1 ## 3 1 1L Invasive 0.15 ## 4 1 1L Native 0.1 ## 5 1 2H Invasive 0.05 ## 6 1 2H Native 0.2 This all looks good! Now we have summed values of all the native and invasive cover for each plot for the last sampling date. Let’s go ahead and graph! 4.3 Graphing the data Now, let’s graph up the values we calculate for invasive and native cover at each plot. For the first order of business, I want to replace all the names of the plots from my research codes to codes that will make sense to a wider audience. graph_data &lt;- graph_data %&gt;% mutate(Plot = case_when( Plot == &quot;1H&quot; ~ &quot;Perennial forbs (high)&quot;, Plot == &quot;1L&quot; ~ &quot;Perennial forbs (low)&quot;, Plot == &quot;2H&quot; ~ &quot;Rushes (high)&quot;, Plot == &quot;2L&quot; ~ &quot;Rushes (low)&quot;, Plot == &quot;3H&quot; ~ &quot;Grasses (high)&quot;, Plot == &quot;3L&quot; ~ &quot;Grasses (low)&quot;, Plot == &quot;4H&quot; ~ &quot;Bulrushes (high)&quot;, Plot == &quot;4L&quot; ~ &quot;Bulrushes (low)&quot;, Plot == &quot;5H&quot; ~ &quot;Annual forbs (high)&quot;, Plot == &quot;5L&quot; ~ &quot;Annual forbs (low)&quot;, Plot == &quot;C&quot; ~ &quot;Control&quot;, TRUE ~ &quot;PROBLEM&quot; )) #Double check graph_data %&gt;% group_by(Plot) %&gt;% tally() ## # A tibble: 11 × 2 ## Plot n ## &lt;chr&gt; &lt;int&gt; ## 1 Annual forbs (high) 12 ## 2 Annual forbs (low) 12 ## 3 Bulrushes (high) 12 ## 4 Bulrushes (low) 12 ## 5 Control 12 ## 6 Grasses (high) 12 ## 7 Grasses (low) 12 ## 8 Perennial forbs (high) 12 ## 9 Perennial forbs (low) 12 ## 10 Rushes (high) 12 ## 11 Rushes (low) 12 After double checking our data, nothing came up as a “PROBLEM” so all our calculations look good! Now we can finally graph it. Let’s use points with error bars, color coded depending on whether the value is for native or invasive species. fb_plot &lt;- graph_data %&gt;% mutate(Plot = factor(Plot, #set the order I want levels = c(&quot;Control&quot;, &quot;Annual forbs (high)&quot;, &quot;Annual forbs (low)&quot;, &quot;Perennial forbs (high)&quot;, &quot;Perennial forbs (low)&quot;, &quot;Rushes (high)&quot;, &quot;Rushes (low)&quot;, &quot;Grasses (high)&quot;, &quot;Grasses (low)&quot;, &quot;Bulrushes (high)&quot;, &quot;Bulrushes (low)&quot;))) %&gt;% ggplot(aes(x = Plot, y = PC, color = Status)) + #x is plot, y is cover stat_summary(aes(group = Status), #calculate means of the total cover fun = mean, geom = &quot;point&quot;, size = 2) + stat_summary(aes(group = Status, width = 0), #calculate error bars fun.data = mean_se, geom = &quot;errorbar&quot;, size = 1) + labs(x = &quot;Functional Group&quot;, y = &quot;Cover (%)&quot;, title = &quot;Farmington Bay&quot;) + #labels theme(axis.text.x = element_text(angle = 45, hjust = 0.9)) fb_plot ### Utah Lake Data Now we can do it all again with the Utah Lake data. graph_data2 &lt;- ul%&gt;% select(Block, Plot, Group, Density, Date, PHAU, BOMA, BICE, CYER, RUMA, Cheno, SCAC, SCPU, SCAM, DISP, RACY, ASIN, ALPR, CYDA, Unk_Bulrush, BY, SYCI, EUOC, TYPHA, Tamarisk, POPE, POFR, SAAM, BASC, LASE) %&gt;% filter(Date == &quot;2022-09-16&quot;) %&gt;% pivot_longer( cols = 6:30, names_to = &quot;SPP&quot;, values_to = &quot;Percent_Cover&quot; ) %&gt;% mutate(Status = dplyr::if_else( SPP %in% c(&quot;PHAU&quot;, &quot;TYPHA&quot;, &quot;RUST&quot;, &quot;Tamarisk&quot;, &quot;ALPR&quot;, &quot;CYDA&quot;, &quot;BY&quot;, &quot;BASC&quot;, &quot;LASE&quot;), &quot;Invasive&quot;, &quot;Native&quot;)) %&gt;% group_by(Block, Plot, Status) %&gt;% summarise(PC = sum(Percent_Cover, na.rm = TRUE)) ## `summarise()` has grouped output by &#39;Block&#39;, &#39;Plot&#39;. You ## can override using the `.groups` argument. graph_data2 &lt;- graph_data2 %&gt;% mutate(Plot = case_when( Plot == &quot;1H&quot; ~ &quot;Perennial forbs (high)&quot;, Plot == &quot;1L&quot; ~ &quot;Perennial forbs (low)&quot;, Plot == &quot;2H&quot; ~ &quot;Rushes (high)&quot;, Plot == &quot;2L&quot; ~ &quot;Rushes (low)&quot;, Plot == &quot;3H&quot; ~ &quot;Grasses (high)&quot;, Plot == &quot;3L&quot; ~ &quot;Grasses (low)&quot;, Plot == &quot;4H&quot; ~ &quot;Bulrushes (high)&quot;, Plot == &quot;4L&quot; ~ &quot;Bulrushes (low)&quot;, Plot == &quot;5H&quot; ~ &quot;Annual forbs (high)&quot;, Plot == &quot;5L&quot; ~ &quot;Annual forbs (low)&quot;, Plot == &quot;C&quot; ~ &quot;Control&quot;, TRUE ~ &quot;PROBLEM&quot; )) ul_plot &lt;- graph_data2 %&gt;% mutate(Plot = factor(Plot, #set the order I want levels = c(&quot;Control&quot;, &quot;Annual forbs (high)&quot;, &quot;Annual forbs (low)&quot;, &quot;Perennial forbs (high)&quot;, &quot;Perennial forbs (low)&quot;, &quot;Rushes (high)&quot;, &quot;Rushes (low)&quot;, &quot;Grasses (high)&quot;, &quot;Grasses (low)&quot;, &quot;Bulrushes (high)&quot;, &quot;Bulrushes (low)&quot;))) %&gt;% ggplot(aes(x = Plot, y = PC, color = Status)) + #x is plot, y is cover stat_summary(aes(group = Status), #calculate means of the total cover fun = mean, geom = &quot;point&quot;, size = 2) + stat_summary(aes(group = Status, width = 0), #calculate error bars fun.data = mean_se, geom = &quot;errorbar&quot;, size = 1) + labs(x = &quot;Functional Group&quot;, y = &quot;Cover (%)&quot;, title = &quot;Utah Lake&quot;) + #labels theme(axis.text.x = element_text(angle = 45, hjust = 0.9)) ul_plot 4.4 Combine For my final output, I would like these two graphs side by side. Let’s use patchwork to combine them. library(patchwork) fb_plot + ul_plot They look great! Unfortunately, there do not appear to be any differences in native or invasive biomass as a result of seed mix. A generalized linear mixed model shows that the only significant difference is between the bulrushes and annual forbs at the Farmington Bay plots, but none of my plots are significantly different from the controls. Oh well, I guess that is how field work goes. Hopefully I will get more exciting results after my second year of monitoring! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
