unique(ul$Unk_Sedge)
ul$Unk_Sedge[ul$Unk_Sedge == "<1"] <- "0.5"
ul$Unk_Sedge[ul$Unk_Sedge == 1.00] <- 5.00
ul$Unk_Sedge[ul$Unk_Sedge == 10.00] <- 15.00
ul$Unk_Sedge[ul$Unk_Sedge == 20.00] <- 25.00
ul$Unk_Sedge[ul$Unk_Sedge == 30.00] <- 35.00
ul$Unk_Sedge[ul$Unk_Sedge == 40.00] <- 45.00
ul$Unk_Sedge <- as.double(ul$Unk_Sedge)
ul$Unk_Sedge <- ul$Unk_Sedge/100
unique(ul$BOMA)
ul$BOMA[ul$BOMA == "<1"] <- "0.5"
ul$BOMA[ul$BOMA == 1.00] <- 5.00
ul$BOMA[ul$BOMA == 10.00] <- 15.00
ul$BOMA[ul$BOMA == 20.00] <- 25.00
ul$BOMA[ul$BOMA == 30.00] <- 35.00
ul$BOMA[ul$BOMA == 40.00] <- 45.00
ul$BOMA[ul$BOMA == 50.00] <- 55.00
ul$BOMA <- as.double(ul$BOMA)
ul$BOMA <- ul$BOMA/100
unique(ul$BICE)
ul$BICE[ul$BICE == 1.00] <- 5.00
ul$BICE[ul$BICE == 10.00] <- 15.00
ul$BICE[ul$BICE == 20.00] <- 25.00
ul$BICE[ul$BICE == 30.00] <- 35.00
ul$BICE <- as.double(ul$BICE)
ul$BICE <- ul$BICE/100
unique(ul$CYER)
ul$CYER[ul$CYER == 1.00] <- 5.00
ul$CYER[ul$CYER == 10.00] <- 15.00
ul$CYER[ul$CYER == 20.00] <- 25.00
ul$CYER[ul$CYER == 30.00] <- 35.00
ul$CYER[ul$CYER == 40.00] <- 45.00
ul$CYER[ul$CYER == 60.00] <- 65.00
ul$CYER[ul$CYER == 70.00] <- 75.00
ul$CYER <- as.double(ul$CYER)
ul$CYER <- ul$CYER/100
unique(ul$RUMA)
ul$RUMA[ul$RUMA == "<1"] <- "0.5"
ul$RUMA[ul$RUMA == 1.00] <- 5.00
ul$RUMA[ul$RUMA == 10.00] <- 15.00
ul$RUMA[ul$RUMA == 20.00] <- 25.00
ul$RUMA[ul$RUMA == 30.00] <- 35.00
ul$RUMA[ul$RUMA == 40.00] <- 45.00
ul$RUMA[ul$RUMA == 50.00] <- 55.00
ul$RUMA[ul$RUMA == 60.00] <- 65.00
ul$RUMA[ul$RUMA == 70.00] <- 75.00
ul$RUMA[ul$RUMA == 80.00] <- 85.00
ul$RUMA <- as.double(ul$RUMA)
ul$RUMA <- ul$RUMA/100
unique(ul$BASC)
ul$BASC[ul$BASC == 1.00] <- 5.00
ul$BASC[ul$BASC == 10.00] <- 15.00
ul$BASC <- as.double(ul$BASC)
ul$BASC <- ul$BASC/100
unique(ul$LASE)
ul$LASE[ul$LASE == 1.00] <- 5.00
ul$LASE[ul$LASE == 10.00] <- 15.00
ul$LASE <- as.double(ul$LASE)
ul$LASE <- ul$LASE/100
unique(ul$Cheno)
ul$Cheno[ul$Cheno == "<1"] <- "0.5"
ul$Cheno[ul$Cheno == 1.00] <- 5.00
ul$Cheno[ul$Cheno == 10.00] <- 15.00
ul$Cheno[ul$Cheno == 20.00] <- 25.00
ul$Cheno[ul$Cheno == 30.00] <- 35.00
ul$Cheno[ul$Cheno == 40.00] <- 45.00
ul$Cheno[ul$Cheno == 50.00] <- 55.00
ul$Cheno <- as.double(ul$Cheno)
ul$Cheno <- ul$Cheno/100
unique(ul$SCAC)
ul$SCAC[ul$SCAC == "<1"] <- "0.5"
ul$SCAC[ul$SCAC == 1.00] <- 5.00
ul$SCAC <- as.double(ul$SCAC)
ul$SCAC <- ul$SCAC/100
unique(ul$SCPU)
ul$SCPU[ul$SCPU == "<1"] <- "0.5"
ul$SCPU[ul$SCPU == 1.00] <- 5.00
ul$SCPU <- as.double(ul$SCPU)
ul$SCPU <- ul$SCPU/100
unique(ul$SCAM)
ul$SCAM[ul$SCAM == "<1"] <- "0.5"
ul$SCAM[ul$SCAM == 1.00] <- 5.00
ul$SCAM[ul$SCAM == 10.00] <- 15.00
ul$SCAM <- as.double(ul$SCAM)
ul$SCAM <- ul$SCAM/100
unique(ul$DISP)
ul$DISP[ul$DISP == "<1"] <- "0.5"
ul$DISP[ul$DISP == 1.00] <- 5.00
ul$DISP[ul$DISP == 10.00] <- 15.00
ul$DISP <- as.double(ul$DISP)
ul$DISP <- ul$DISP/100
unique(ul$RACY)
ul$RACY[ul$RACY == "<1"] <- "0.5"
ul$RACY[ul$RACY == 1.00] <- 5.00
ul$RACY <- as.double(ul$RACY)
ul$RACY <- ul$RACY/100
unique(ul$ASIN)
ul$ASIN[ul$ASIN == "<1"] <- "0.5"
ul$ASIN[ul$ASIN == 1.00] <- 5.00
ul$ASIN <- as.double(ul$ASIN)
ul$ASIN <- ul$ASIN/100
unique(ul$Unk_Grass)
ul$Unk_Grass[ul$Unk_Grass == "<1"] <- "0.5"
ul$Unk_Grass[ul$Unk_Grass == 1.00] <- 5.00
ul$Unk_Grass[ul$Unk_Grass == 10.00] <- 15.00
ul$Unk_Grass[ul$Unk_Grass == 20.00] <- 25.00
ul$Unk_Grass <- as.double(ul$Unk_Grass)
ul$Unk_Grass <- ul$Unk_Grass/100
unique(ul$ALPR)
ul$ALPR[ul$ALPR == "<1"] <- "0.5"
ul$ALPR[ul$ALPR == 1.00] <- 5.00
ul$ALPR[ul$ALPR == 10.00] <- 15.00
ul$ALPR[ul$ALPR == 20.00] <- 25.00
ul$ALPR <- as.double(ul$ALPR)
ul$ALPR <- ul$ALPR/100
unique(ul$CYDA)
ul$CYDA[ul$CYDA == 1.00] <- 5.00
ul$CYDA[ul$CYDA == 10.00] <- 15.00
ul$CYDA <- as.double(ul$CYDA)
ul$CYDA <- ul$CYDA/100
unique(ul$POFR)
ul$POFR[ul$POFR == "<1"] <- "0.5"
ul$POFR[ul$POFR == 1.00] <- 5.00
ul$POFR <- as.double(ul$POFR)
ul$POFR <- ul$POFR/100
unique(ul$SAAM)
ul$SAAM[ul$SAAM == "<1"] <- "0.5"
ul$SAAM[ul$SAAM == 1.00] <- 5.00
ul$SAAM <- as.double(ul$SAAM)
ul$SAAM <- ul$SAAM/100
unique(ul$Unk_Bulrush)
ul$Unk_Bulrush[ul$Unk_Bulrush == "<1"] <- "0.5"
ul$Unk_Bulrush[ul$Unk_Bulrush == 1.00] <- 5.00
ul$Unk_Bulrush <- as.double(ul$Unk_Bulrush)
ul$Unk_Bulrush <- ul$Unk_Bulrush/100
unique(ul$BY)
ul$BY[ul$BY == 1.00] <- 5.00
ul$BY <- as.double(ul$BY)
ul$BY <- ul$BY/100
unique(ul$SYCI)
ul$SYCI[ul$SYCI == 1.00] <- 5.00
ul$SYCI[ul$SYCI == 10.00] <- 15.00
ul$SYCI <- as.double(ul$SYCI)
ul$SYCI <- ul$SYCI/100
unique(ul$EUOC)
ul$EUOC[ul$EUOC == "<1"] <- "0.5"
ul$EUOC[ul$EUOC == 1.00] <- 5.00
ul$EUOC[ul$EUOC == 10.00] <- 15.00
ul$EUOC <- as.double(ul$EUOC)
ul$EUOC <- ul$EUOC/100
unique(ul$TYPHA)
ul$TYPHA[ul$TYPHA == "<1"] <- "0.5"
ul$TYPHA[ul$TYPHA == 1.00] <- 5.00
ul$TYPHA <- as.double(ul$TYPHA)
ul$TYPHA <- ul$TYPHA/100
unique(ul$Tamarisk)
ul$Tamarisk[ul$Tamarisk == "<1"] <- "0.5"
ul$Tamarisk[ul$Tamarisk == 1.00] <- 5.00
ul$Tamarisk[ul$Tamarisk == 10.00] <- 15.00
ul$Tamarisk <- as.double(ul$Tamarisk)
ul$Tamarisk <- ul$Tamarisk/100
unique(ul$POPE)
ul$POPE[ul$POPE == "<1"] <- "0.5"
ul$POPE[ul$POPE == 1.00] <- 5.00
ul$POPE <- as.double(ul$POPE)
ul$POPE <- ul$POPE/100
glimpse(ul)
#check the measurements
min(ul$Measurement.1)
max(ul$Measurement.1)
min(ul$Measurement.2)
max(ul$Measurement.2)
min(ul$Measurement.3, na.rm = TRUE)
max(ul$Measurement.3, na.rm = TRUE)
#Add a new section for invasives and natives
df <- ul %>%
select("PHAU", "TYPHA", "Tamarisk", "ALPR", "CYDA", "BY",
"BASC", "LASE") %>%
mutate(Invasive = rowMeans(.,na.rm = T))
df1 <- ul %>%
select("Unk_Bulrush", "BOMA", "BICE", 'CYER', 'RUMA', 'Cheno', 'SCAC', 'SCAM',
'SCPU', 'DISP', 'RACY', 'ASIN', 'SYCI', 'EUOC', 'POPE', 'POFR', 'SAAM') %>%
mutate(Native = rowMeans(.,na.rm = T))
ul$Invasive.Cover <- df$Invasive
ul$Native.Cover <- df1$Native
max(ul$Invasive.Cover, na.rm = TRUE)
max(ul$Native.Cover, na.rm = TRUE)
####Save files####
save(ul, fb, file = "clean_dfs.RData")
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
unique(mdf$Group)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
fb$Group <- as.factor(fb$Group)
source("~/Documents/USUClasses/Thesis_Code/Field22/Code/Data_Cleaning.R", echo=TRUE)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
as.character(mdf$Group)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf$Group <- as.character(mdf$Group)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
View(mdf)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Date, Invasive.Cover, Native.Cover)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Density)
mdf.m2 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
unique(fb$Invasive.Cover)
unique(fb$Invasive.Cover)
fb$Invasive.Cover[is.na(fb$Invasive.Cover)]
#get rid of the NAs
fb$Invasive.Cover[is.na(fb$Invasive.Cover)] <- 0.0025
unique(fb$Invasive.Cover)
unique(ul$Native.Cover)
#get rid of the NAs
min(fb$Invasive.Cover)
unique(fb$Native.Cover)
min(fb$Native.Cover)
min(fb$Native.Cover, na.rm = TRUE)
fb$Native.Cover[is.na(fb$Native.Cover)] <- 0.0025
min(fb$Native.Cover, na.rm = TRUE)
unique(fb$Native.Cover)
unique(ul$Invasive.Cover)
#unique(ul$Invasive.Cover)
#get rid of the NAs
min(ul$Invasive.Cover)
#unique(ul$Invasive.Cover)
#get rid of the NAs
min(ul$Invasive.Cover, na.rm = TRUE)
ul$Invasive.Cover[is.na(ul$Invasive.Cover)] <- 0.0025
#unique(ul$Invasive.Cover)
#get rid of the NAs
min(ul$Invasive.Cover, na.rm = TRUE)
unique(ul$Native.Cover)
#unique(ul$Native.Cover)
min(ul$Native.Cover, na.rm = TRUE)
ul$Native.Cover[is.na(ul$Native.Cover)] <- 0.0025
#unique(ul$Native.Cover)
min(ul$Native.Cover, na.rm = TRUE)
#unique(ul$Native.Cover)
#min(ul$Native.Cover, na.rm = TRUE)
ul$Native.Cover[is.na(ul$Native.Cover)] <- 0.0025
source("~/Documents/USUClasses/Thesis_Code/Field22/Code/Data_Cleaning.R", echo=TRUE)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Density)
mdf.m2 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf.m2 <- glmmTMB(Native.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m2)
