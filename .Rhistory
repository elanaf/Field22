unique(fb$Unk_Rush)
fb$Unk_Rush[fb$Unk_Rush == "<1"] <- "0.5"
fb$Unk_Rush[fb$Unk_Rush == 1.00] <- 5.00
fb$Unk_Rush <- as.double(fb$Unk_Rush)
names(fb)[25] <- "Unk_Bulrush"
fb$Unk_Bulrush <- fb$Unk_Bulrush/100
unique(fb$SARU)
fb$SARU[fb$SARU == "<1"] <- "0.5"
fb$SARU[fb$SARU == 1.00] <- 5.00
fb$SARU <- as.double(fb$SARU)
fb$SARU <- fb$SARU/100
unique(fb$Tamarisk)
fb$Tamarisk[fb$Tamarisk == "<1"] <- "0.5"
fb$Tamarisk[fb$Tamarisk == 1.00] <- 5.00
fb$Tamarisk <- as.double(fb$Tamarisk)
fb$Tamarisk <- fb$Tamarisk/100
glimpse(fb)
#check measurements to make sure they make sense
min(fb$Measurement.1)
max(fb$Measurement.1)
min(fb$Measurement.2)
max(fb$Measurement.2)
min(fb$Measurement.3)
max(fb$Measurement.3)
#make everything a decimal
fb[6:27] <- fb[6:27]/100
fb <- read.csv("/Users/elanafeldman/Documents/USUClasses/Thesis_Code/Field22/Cleaned-Data/clean_fb.csv")
ul <- read.csv("/Users/elanafeldman/Documents/USUClasses/Thesis_Code/Field22/Cleaned-Data/clean_ul.csv")
library(dplyr)
View(fb)
View(ul)
####fix FB####
glimpse(fb)
#remake block and make plot a factor
names(fb)[1] <- "Block"
fb$Plot <- as.factor(fb$Plot)
#change the C in block so it is not rank deficient, then make a factor
fb$Group[fb$Group == "C"] <- 10
fb$Group <- as.factor(fb$Group)
#double check density and group and then make a factor
unique(fb$Group)
fb$Group <- as.factor(fb$Group)
unique(fb$Density)
fb$Density <- as.factor(fb$Density)
#fix the date
library(lubridate)
fb$Date <- lubridate::mdy(fb$Date)
#change cover values to the 5s and make numeric
unique(fb$Total.Cover)
fb$Total.Cover[fb$Total.Cover == "<1"] <- "0.5"
fb$Total.Cover[fb$Total.Cover == 1.00] <- 5.00
fb$Total.Cover[fb$Total.Cover == 10.00] <- 15.00
fb$Total.Cover[fb$Total.Cover == 20.00] <- 25.00
fb$Total.Cover[fb$Total.Cover == 30.00] <- 35.00
fb$Total.Cover[fb$Total.Cover == 40.00] <- 45.00
fb$Total.Cover[fb$Total.Cover == 50.00] <- 55.00
fb$Total.Cover[fb$Total.Cover == 60.00] <- 65.00
fb$Total.Cover[fb$Total.Cover == 70.00] <- 75.00
fb$Total.Cover <- as.double(fb$Total.Cover)
fb$Total.Cover <- fb$Total.Cover/100
#now do it for all the other columns
unique(fb$PHAU)
fb$PHAU[fb$PHAU == "<1"] <- "0.5"
fb$PHAU[fb$PHAU == 1.00] <- 5.00
fb$PHAU[fb$PHAU == 10.00] <- 15.00
fb$PHAU <- as.double(fb$PHAU)
fb$PHAU <- fb$PHAU/100
unique(fb$Cheno)
fb$Cheno[fb$Cheno == "<1"] <- "0.5"
fb$Cheno[fb$Cheno == 1.00] <- 5.00
fb$Cheno[fb$Cheno == 10.00] <- 15.00
fb$Cheno[fb$Cheno == 20.00] <- 25.00
fb$Cheno[fb$Cheno == 30.00] <- 35.00
fb$Cheno <- as.double(fb$Cheno)
fb$Cheno <- fb$Cheno/100
unique(fb$Typha)
fb$Typha[fb$Typha == "<1"] <- "0.5"
fb$Typha[fb$Typha == 1.00] <- 5.00
fb$Typha[fb$Typha == 10.00] <- 15.00
fb$Typha <- as.double(fb$Typha)
fb$Typha <- fb$Typha/100
unique(fb$BOMA)
fb$BOMA[fb$BOMA == "<1"] <- "0.5"
fb$BOMA[fb$BOMA == 1.00] <- 5.00
fb$BOMA[fb$BOMA == 10.00] <- 15.00
fb$BOMA[fb$BOMA == 20.00] <- 25.00
fb$BOMA <- as.double(fb$BOMA)
fb$BOMA <- fb$BOMA/100
unique(fb$DISP)
fb$DISP[fb$DISP == "<1"] <- "0.5"
fb$DISP[fb$DISP == 1.00] <- 5.00
fb$DISP[fb$DISP == 10.00] <- 15.00
fb$DISP[fb$DISP == 20.00] <- 25.00
fb$DISP[fb$DISP == 30.00] <- 35.00
fb$DISP[fb$DISP == 40.00] <- 45.00
fb$DISP[fb$DISP == 50.00] <- 55.00
fb$DISP[fb$DISP == 60.00] <- 65.00
fb$DISP <- as.double(fb$DISP)
fb$DISP <- fb$DISP/100
unique(fb$EUMA)
fb$EUMA[fb$EUMA == "<1"] <- "0.5"
fb$EUMA[fb$EUMA == 1.00] <- 5.00
fb$EUMA <- as.double(fb$EUMA)
fb$EUMA <- fb$EUMA/100
unique(fb$SYCI)
fb$SYCI[fb$SYCI == "<1"] <- "0.5"
fb$SYCI[fb$SYCI == 1.00] <- 5.00
fb$SYCI[fb$SYCI == 10.00] <- 15.00
fb$SYCI <- as.double(fb$SYCI)
fb$SYCI <- fb$SYCI/100
unique(fb$LEFA)
fb$LEFA[fb$LEFA == "<1"] <- "0.5"
fb$LEFA[fb$LEFA == 1.00] <- 5.00
fb$LEFA[fb$LEFA == 10.00] <- 15.00
fb$LEFA[fb$LEFA == 20.00] <- 25.00
fb$LEFA <- as.double(fb$LEFA)
fb$LEFA <- fb$LEFA/100
unique(fb$SCAC)
fb$SCAC[fb$SCAC == "<1"] <- "0.5"
fb$SCAC[fb$SCAC == 1.00] <- 5.00
fb$SCAC <- as.double(fb$SCAC)
fb$SCAC <- fb$SCAC/100
unique(fb$BICE)
fb$BICE[fb$BICE == "<1"] <- "0.5"
fb$BICE[fb$BICE == 1.00] <- 5.00
fb$BICE[fb$BICE == 10.00] <- 15.00
fb$BICE <- as.double(fb$BICE)
fb$BICE <- fb$BICE/100
unique(fb$BIFR)
fb$BIFR[fb$BIFR == "<1"] <- "0.5"
fb$BIFR[fb$BIFR == 1.00] <- 5.00
fb$BIFR <- as.double(fb$BIFR)
fb$BIFR <- fb$BIFR/100
unique(fb$EUOC)
fb$EUOC[fb$EUOC == 1.00] <- 5.00
fb$EUOC <- as.double(fb$EUOC)
fb$EUOC <- fb$EUOC/100
unique(fb$MUAS)
fb$MUAS[fb$MUAS == 1.00] <- 5.00
fb$MUAS[fb$MUAS == 10.00] <- 15.00
fb$MUAS <- as.double(fb$MUAS)
fb$MUAS <- fb$MUAS/100
unique(fb$SCAM)
fb$SCAM[fb$SCAM == 1.00] <- 5.00
fb$SCAM <- as.double(fb$SCAM)
fb$SCAM <- fb$SCAM/100
unique(fb$RUMA)
fb$RUMA[fb$RUMA == "<1"] <- "0.5"
fb$RUMA[fb$RUMA == 1.00] <- 5.00
fb$RUMA <- as.double(fb$RUMA)
fb$RUMA <- fb$RUMA/100
unique(fb$RUST)
fb$RUST[fb$RUST == "<1"] <- "0.5"
fb$RUST[fb$RUST == 1.00] <- 5.00
fb$RUST[fb$RUST == 10.00] <- 15.00
fb$RUST <- as.double(fb$RUST)
fb$RUST <- fb$RUST/100
unique(fb$Unk_Forb)
fb$Unk_Forb[fb$Unk_Forb == "<1"] <- "0.5"
fb$Unk_Forb[fb$Unk_Forb == 1.00] <- 5.00
fb$Unk_Forb <- as.double(fb$Unk_Forb)
fb$Unk_Forb <- fb$Unk_Forb/100
unique(fb$Unk_Grass)
fb$Unk_Grass[fb$Unk_Grass == "<1"] <- "0.5"
fb$Unk_Grass[fb$Unk_Grass == 1.00] <- 5.00
fb$Unk_Grass <- as.double(fb$Unk_Grass)
fb$Unk_Grass <- fb$Unk_Grass/100
unique(fb$Unk_Rush)
fb$Unk_Rush[fb$Unk_Rush == "<1"] <- "0.5"
fb$Unk_Rush[fb$Unk_Rush == 1.00] <- 5.00
fb$Unk_Rush <- as.double(fb$Unk_Rush)
names(fb)[25] <- "Unk_Bulrush"
fb$Unk_Bulrush <- fb$Unk_Bulrush/100
unique(fb$SARU)
fb$SARU[fb$SARU == "<1"] <- "0.5"
fb$SARU[fb$SARU == 1.00] <- 5.00
fb$SARU <- as.double(fb$SARU)
fb$SARU <- fb$SARU/100
unique(fb$Tamarisk)
fb$Tamarisk[fb$Tamarisk == "<1"] <- "0.5"
fb$Tamarisk[fb$Tamarisk == 1.00] <- 5.00
fb$Tamarisk <- as.double(fb$Tamarisk)
fb$Tamarisk <- fb$Tamarisk/100
glimpse(fb)
#check measurements to make sure they make sense
min(fb$Measurement.1)
max(fb$Measurement.1)
min(fb$Measurement.2)
max(fb$Measurement.2)
min(fb$Measurement.3)
max(fb$Measurement.3)
#Add a new section for invasives and natives
df <- fb %>%
select("PHAU", "Typha", "RUST", "Tamarisk") %>%
mutate(Invasive = rowSums(.,na.rm = T))
df1 <- fb %>%
select("Cheno", "BOMA", "DISP", "EUMA", "SYCI", "LEFA", "SCAC",
"BICE", "BIFR", "EUOC", "MUAS", "SCAM", "RUMA", "Unk_Bulrush",
"SARU") %>%
mutate(Native = rowSums(.,na.rm = T))
fb$Invasive.Cover <- df$Invasive
fb$Native.Cover <- df1$Native
max(fb$Invasive.Cover, na.rm = T)
max(fb$Native.Cover, na.rm = T)
#unique(fb$Invasive.Cover)
#get rid of the NAs
#min(fb$Invasive.Cover)
fb$Invasive.Cover[is.na(fb$Invasive.Cover)] <- 0.0025
#unique(fb$Native.Cover)
#min(fb$Native.Cover, na.rm = TRUE)
fb$Native.Cover[is.na(fb$Native.Cover)] <- 0.0025
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
View(mdf)
unique(fb$Invasive.Cover)
unique(fb$Native.Cover)
fb$Invasive.Cover[fb$Invasive.Cover==0] <- 0.0025
unique(fb$Invasive.Cover)
fb$Native.Cover[fb$Native.Cover==0] <- 0.0025
ul$Invasive.Cover[ul$Invasive.Cover==0] <- 0.0025
unique(ul$Invasive.Cover)
source("~/Documents/USUClasses/Thesis_Code/Field22/Code/Data_Cleaning.R", echo=TRUE)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Density)
mdf.m2 <- glmmTMB(Native.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m2)
##Model - does invasive cover change with plot?
mdf <- ul %>%
filter(Date == "2022-09-16")
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m3 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m3)
mdf.m4 <- glmmTMB(Native.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m4)
fb$Density[fb$Density == "C"] <- "X"
source("~/Documents/USUClasses/Thesis_Code/Field22/Code/Data_Cleaning.R", echo=TRUE)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
max(ul$Invasive.Cover, na.rm = TRUE)
max(ul$Native.Cover, na.rm = TRUE)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
table(mdf$Group, mdf$Density, useNA = "ifany")
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = filter(mdf, Density != "C"),
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Density)
View(mdf)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = filter(mdf, Density != "C"),
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Density)
useData <- filter(mdf, Density != "C")
useData$Group <- factor(useData$Group)
useData$Density <- factor(useData$Density)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
plotResiduals(mdf.m1, form= mdf$Density) #not working because I took out a level
plotResiduals(mdf.m1, form= useData$Density) #not working because I took out a level
table(mdf$Group:mdf$Density)
factor(mdf$Group:mdf$Density)
mdf$gd <- factor(mdf$Group:mdf$Density)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf.m1 <- glmmTMB(Invasive.Cover ~ gd #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$gd)
emmeans(mdf.m1, specs = trt.vs.ctrlk~gd,ref = 3) #reference group is the third option (10:C)
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
useData <- filter(mdf, Density != "C") #to make the plotResiduals work
useData$Group <- factor(useData$Group)
useData$Density <- factor(useData$Density)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
mdf$gd <- factor(mdf$Group:mdf$Density)
mdf.m1 <- glmmTMB(Native.Cover ~ gd #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$gd)
#Dunnetts test - type 1 error control, comparing the control to each of 10 other means
#We have inflated type 1 error because we use the control mean 10 times
#We could use a tukeys but that would control for 55 tests and we only need 10 - we will lose all power
#Allows us to just look at control against every other treatment - only the comparisons we want
emmeans(mdf.m1, specs = trt.vs.ctrlk~gd,ref = 3) #reference group is the third option (10:C)
mdf.m2 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m2)
mdf.m2 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = filter(mdf, Density != "C"),
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m2)
simulateResiduals(mdf.m2, plot = T)
mdf.m2 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m2)
simulateResiduals(mdf.m2, plot = T)
plotResiduals(mdf.m2, form= useData$Density) #must have data for every factor level
emmip(mdf.m2, Group~Density)
car::Anova(mdf.m2)
emmip(mdf.m2, Group~Density, CIs = T)
emmip(mdf.m2, Group~Density, CIs = T, type = "response")
emmeans(mdf.m2, pairwise~Group)
emmeans(mdf.m2, pairwise~Group, adjust = "none")
##Model - does invasive cover change with plot?
mdf <- ul %>%
filter(Date == "2022-09-16")
useData <- filter(mdf, Density != "C") #to make the plotResiduals work
useData$Group <- factor(useData$Group)
useData$Density <- factor(useData$Density)
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m3 <- glmmTMB(Invasive.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m3 <- glmmTMB(Invasive.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m3)
simulateResiduals(mdf.m3, plot = T)
plotResiduals(mdf.m3, form= useData$Density)
hist(useData$Native.Cover)
mdf.m4 <- glmmTMB(log(Native.Cover) ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m4)
simulateResiduals(mdf.m4, plot = T)
plotResiduals(mdf.m4, form= mdf$Density)
mdf.m4 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
car::Anova(mdf.m4)
emmip(mdf.m4, Group~Density)
emmip(mdf.m4, Density ~ Group)
emmip(mdf.m4, Density ~ Group, CIs = T)
