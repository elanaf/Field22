library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
unique(mdf$Group)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
fb$Group <- as.factor(fb$Group)
source("~/Documents/USUClasses/Thesis_Code/Field22/Code/Data_Cleaning.R", echo=TRUE)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16")
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
as.character(mdf$Group)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf$Group <- as.character(mdf$Group)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
View(mdf)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Date, Invasive.Cover, Native.Cover)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Density)
mdf.m2 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
unique(fb$Invasive.Cover)
unique(fb$Invasive.Cover)
fb$Invasive.Cover[is.na(fb$Invasive.Cover)]
#get rid of the NAs
fb$Invasive.Cover[is.na(fb$Invasive.Cover)] <- 0.0025
unique(fb$Invasive.Cover)
unique(ul$Native.Cover)
#get rid of the NAs
min(fb$Invasive.Cover)
unique(fb$Native.Cover)
min(fb$Native.Cover)
min(fb$Native.Cover, na.rm = TRUE)
fb$Native.Cover[is.na(fb$Native.Cover)] <- 0.0025
min(fb$Native.Cover, na.rm = TRUE)
unique(fb$Native.Cover)
unique(ul$Invasive.Cover)
#unique(ul$Invasive.Cover)
#get rid of the NAs
min(ul$Invasive.Cover)
#unique(ul$Invasive.Cover)
#get rid of the NAs
min(ul$Invasive.Cover, na.rm = TRUE)
ul$Invasive.Cover[is.na(ul$Invasive.Cover)] <- 0.0025
#unique(ul$Invasive.Cover)
#get rid of the NAs
min(ul$Invasive.Cover, na.rm = TRUE)
unique(ul$Native.Cover)
#unique(ul$Native.Cover)
min(ul$Native.Cover, na.rm = TRUE)
ul$Native.Cover[is.na(ul$Native.Cover)] <- 0.0025
#unique(ul$Native.Cover)
min(ul$Native.Cover, na.rm = TRUE)
#unique(ul$Native.Cover)
#min(ul$Native.Cover, na.rm = TRUE)
ul$Native.Cover[is.na(ul$Native.Cover)] <- 0.0025
source("~/Documents/USUClasses/Thesis_Code/Field22/Code/Data_Cleaning.R", echo=TRUE)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Density)
mdf.m2 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf.m2 <- glmmTMB(Native.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m2)
library(DBI)
field_db <- dbConnect(RSQLite::SQLite(),
"field.db")
#create all tables and enforce relationships
dbExecute(field, "CREATE TABLE cover (
plot_id char(1) NOT NULL,
seed_mix char(1) NOT NULL,
density char(1) NOT NULL,
block char(1) NOT NULL,
date text,
PHAU_cover varchar(2),
DISP_cover varchar(2),
EPCI_cover varchar(2),
SCAM_cover varchar(2),
PRIMARY KEY (plot_id)")
#create all tables and enforce relationships
dbExecute(field_db, "CREATE TABLE cover (
plot_id char(1) NOT NULL,
seed_mix char(1) NOT NULL,
density char(1) NOT NULL,
block char(1) NOT NULL,
date text,
PHAU_cover varchar(2),
DISP_cover varchar(2),
EPCI_cover varchar(2),
SCAM_cover varchar(2),
PRIMARY KEY (plot_id)")
#create all tables and enforce relationships
dbExecute(field_db, "CREATE TABLE cover (
plot_id char(1) NOT NULL,
seed_mix char(1) NOT NULL,
density char(1) NOT NULL,
block char(1) NOT NULL,
date text,
PHAU_cover varchar(2),
DISP_cover varchar(2),
EPCI_cover varchar(2),
SCAM_cover varchar(2),
PRIMARY KEY (plot_id)
);")
dbExecute(field_db, "CREATE TABLE biomass (
plot_id char(1) NOT NULL,
PHAU_biomass float,
DISP_biomass float,
EPCI_biomass float,
SCAM_biomass float,
PRIMARY KEY (plot_id)
FOREIGN KEY (plot_id) REFERENCES cover(plot_id)
);")
#create all tables and enforce relationships
dbExecute(field_db, "CREATE TABLE cover (
plot_id varchar(3) NOT NULL,
seed_mix char(1) NOT NULL,
density char(1) NOT NULL,
block char(1) NOT NULL,
date text,
PHAU_cover varchar(2),
DISP_cover varchar(2),
EPCI_cover varchar(2),
SCAM_cover varchar(2),
PRIMARY KEY (plot_id)
);")
dbExecute(field_db, "CREATE TABLE biomass (
sample_id varchar(3) NOT NULL,
plot_id varchar(3) NOT NULL,
PHAU_biomass float,
DISP_biomass float,
EPCI_biomass float,
SCAM_biomass float,
PRIMARY KEY (sample_id)
FOREIGN KEY (plot_id) REFERENCES cover(plot_id)
);")
dbExecute(field_db, "CREATE TABLE functional_group (
group_id char(1) NOT NULL,
seed_mix char(1) NOT NULL,
group varchar(20)
PRIMARY KEY (group_id)
FOREIGN KEY (seed_mix) REFERENCES cover(seed_mix)
);")
# 3. Import data files into R;
#
# 4. Plug data into tables.
#
# If you don't have data because you have not collected them yet,
#stop at step 2.
#
# Submit the R script (.R file) you used to build your database by
#pushing it to your project repository.
###########################################################################
library(DBI)
#make database
field_db <- dbConnect(RSQLite::SQLite(),
"field.db")
#create all tables and enforce relationships
dbExecute(field_db, "CREATE TABLE cover (
plot_id varchar(3) NOT NULL,
seed_mix char(1) NOT NULL,
density char(1) NOT NULL,
block char(1) NOT NULL,
date text,
PHAU_cover varchar(2),
DISP_cover varchar(2),
EPCI_cover varchar(2),
SCAM_cover varchar(2),
PRIMARY KEY (plot_id)
);")
dbExecute(field_db, "CREATE TABLE biomass (
sample_id varchar(3) NOT NULL,
plot_id varchar(3) NOT NULL,
PHAU_biomass float,
DISP_biomass float,
EPCI_biomass float,
SCAM_biomass float,
PRIMARY KEY (sample_id)
FOREIGN KEY (plot_id) REFERENCES cover(plot_id)
);")
dbExecute(field_db, "CREATE TABLE functional_group (
group_id char(1) NOT NULL,
seed_mix char(1) NOT NULL,
group varchar(20)
PRIMARY KEY (group_id)
FOREIGN KEY (seed_mix) REFERENCES cover(seed_mix)
);")
dbExecute(field_db, "CREATE TABLE functional_group (
group_id char(1) NOT NULL,
seed_mix char(1) NOT NULL,
group varchar(20),
PRIMARY KEY (group_id)
FOREIGN KEY (seed_mix) REFERENCES cover(seed_mix)
);")
dbExecute(field_db, "CREATE TABLE functional_group (
group_id char(1) NOT NULL,
seed_mix char(1) NOT NULL,
grp varchar(20),
PRIMARY KEY (group_id)
FOREIGN KEY (seed_mix) REFERENCES cover(seed_mix)
);")
View(fb)
fb_sql <- select(fb, "Block", "Group", "Plot", "Density", "Date", "PHAU", "DISP", "EPCI", "SCAM")
library(tidyr)
fb_sql <- select(fb, "Block", "Group", "Plot", "Density", "Date", "PHAU", "DISP", "EPCI", "SCAM")
library(dplyr)
fb_sql <- select(fb, "Block", "Group", "Plot", "Density", "Date", "PHAU", "DISP", "EPCI", "SCAM")
#make database
field_db <- dbConnect(RSQLite::SQLite(),
"field.db")
#create all tables and enforce relationships
dbExecute(field_db, "CREATE TABLE cover (
plot_id varchar(3) NOT NULL,
seed_mix char(1) NOT NULL,
density char(1) NOT NULL,
block char(1) NOT NULL,
date text,
PHAU_cover varchar(2),
DISP_cover varchar(2),
EUOC_cover varchar(2),
SCAM_cover varchar(2),
BICE_cover varchar(2),
PRIMARY KEY (plot_id)
);")
dbExecute(field_db, "CREATE TABLE biomass (
sample_id varchar(3) NOT NULL,
plot_id varchar(3) NOT NULL,
PHAU_biomass float,
DISP_biomass float,
EUOC_biomass float,
SCAM_biomass float,
BICE_biomass float,
PRIMARY KEY (sample_id)
FOREIGN KEY (plot_id) REFERENCES cover(plot_id)
);")
dbExecute(field_db, "CREATE TABLE functional_group (
group_id char(1) NOT NULL,
seed_mix char(1) NOT NULL,
grp varchar(20),
PRIMARY KEY (group_id)
FOREIGN KEY (seed_mix) REFERENCES cover(seed_mix)
);")
fb_sql <- select(fb, "Block", "Group", "Plot", "Density", "Date", "PHAU", "DISP", "EUOC", "SCAM", "BICE")
View(fb_sql)
unite(fb_sql, plot_id, c(Plot, Block))
fb_sql <- select(fb, "Block", "Group",  "Density", "Date", "PHAU", "DISP", "EUOC", "SCAM", "BICE")
getwd()
write.csv(fb_sql, "/Users/elanafeldman/Documents/USUClasses/Thesis_Code/Field22/fb_sql.csv")
#import data files into R
cover <- read.csv("/Users/elanafeldman/Documents/USUClasses/Thesis_Code/Field22/fb_sql.csv")
cover$plot_id <- 1:nrow(cover) #create the plot_id
head(cover)
write.csv(fb_sql, "/Users/elanafeldman/Documents/USUClasses/Thesis_Code/Field22/fb_sql.csv", row.names = FALSE)
#import data files into R
cover <- read.csv("/Users/elanafeldman/Documents/USUClasses/Thesis_Code/Field22/fb_sql.csv")
cover$plot_id <- 1:nrow(cover) #create the plot_id
head(cover)
cover <- cover[,c("plot_id", "Group", "Density", "Block",
"Date", "PHAU", "DISP", "EUOC", "SCAM", "BICE")]
names(capture)
names(cover)
names(cover)[2:9] <- c("seed_mix", "density", "block", "date",
"PHAU_cover", "DISP_cover", "EUOC_cover",
"SCAM_cover", "BICE_cover")
names(cover)[2:10] <- c("seed_mix", "density", "block", "date",
"PHAU_cover", "DISP_cover", "EUOC_cover",
"SCAM_cover", "BICE_cover")
dbWriteTable(field_db, "cover", cover, append = TRUE)
dbGetQuery(field_db, "SELECT * FROM cover LIMIT 10;")
functional_group <- unique(fb_sql$Group)
functional_group
as.dataframe(functional_group)
as.data.frame(functional_group)
dbGetQuery(field_db, "SELECT * FROM cover LIMIT 10;")
View(functional_group)
functinal_group
functional_group
functional.group <- as.data.frame(functional_group)
View(functional.group)
functional.group$grp <- c("Perennial Forb", "Annual Forb", "Rushes", "Bulrushes", "Grasses", "Control")
names(functional.group)[1] <- seed_mix
names(functional.group)[1] <- "seed_mix"
write.csv(functional.group, "/Users/elanafeldman/Documents/USUClasses/Thesis_Code/Field22/functional_group.csv", row.names = FALSE)
functional_group <- read.csv("/Users/elanafeldman/Documents/USUClasses/Thesis_Code/Field22/functional_group.csv")
functional_group$group_id <- 1:nrow(functional_group)
head(functional_group)
functional_group <- functional_group[,c("group_id", "seed_mix", "grp")]
head(functional_group)
dbWriteTable(field_db, "functional_group", functional_group, append = TRUE)
dbGetQuery(field_db, "SELECT * FROM functional_group LIMIT 10;")
