values_to = "Percent_Cover"
) %>% #pivot so that all species names are in one column
mutate(Status = case_when(
SPP %in% c("PHAU", "TYPHA", "RUST", "Tamarisk") ~ "Invasive",
SPP %in% c("BOMA", "SCAC", "SCAM") & Group == 4 ~ "Seeded",
SPP %in% c("DISP", "MUAS") & Group == 3 ~ "Seeded",
SPP %in% c("EUOC", "EUMA") & Group == 1 ~ "Seeded",
SPP %in% c("SYCI", "BICE", "RUMA") & Group == 5 ~ "Seeded",
TRUE ~ "Native"))%>%  #make a new column for species status
group_by(Block, Plot, Density, Group Status) %>% #group by the plot and species status
fb2 <-fb %>%
select(Block, Plot, Group, Density, Date, PHAU, Cheno, Typha,
BOMA, DISP, EUMA, SYCI, LEFA, SCAC, BICE, BIFR, EUOC, MUAS, SCAM, RUMA,
RUST, Unk_Bulrush, SARU, Tamarisk) %>%  #remove unnecessary columns
filter(Date == "2022-09-16") %>%  #only the last sampling date
pivot_longer(
cols = 6:24,
names_to = "SPP",
values_to = "Percent_Cover"
) %>% #pivot so that all species names are in one column
mutate(Status = case_when(
SPP %in% c("PHAU", "TYPHA", "RUST", "Tamarisk") ~ "Invasive",
SPP %in% c("BOMA", "SCAC", "SCAM") & Group == 4 ~ "Seeded",
SPP %in% c("DISP", "MUAS") & Group == 3 ~ "Seeded",
SPP %in% c("EUOC", "EUMA") & Group == 1 ~ "Seeded",
SPP %in% c("SYCI", "BICE", "RUMA") & Group == 5 ~ "Seeded",
TRUE ~ "Native"))
# Do it again but only with the seeded, not the control ####
#Can't compare the treatments to the control in terms of seeded the way I currently have it,
#so just did the comparison between the treatments
fb2 <-fb %>%
select(Block, Plot, Group, Density, Date, PHAU, Cheno, Typha,
BOMA, DISP, EUMA, SYCI, LEFA, SCAC, BICE, BIFR, EUOC, MUAS, SCAM, RUMA,
RUST, Unk_Bulrush, SARU, Tamarisk) %>%  #remove unnecessary columns
filter(Date == "2022-09-16") %>%  #only the last sampling date
pivot_longer(
cols = 6:24,
names_to = "SPP",
values_to = "Percent_Cover"
) %>% #pivot so that all species names are in one column
mutate(Status = case_when(
SPP %in% c("PHAU", "TYPHA", "RUST", "Tamarisk") ~ "Invasive",
SPP %in% c("BOMA", "SCAC", "SCAM") & Group == 4 ~ "Seeded",
SPP %in% c("DISP", "MUAS") & Group == 3 ~ "Seeded",
SPP %in% c("EUOC", "EUMA") & Group == 1 ~ "Seeded",
SPP %in% c("SYCI", "BICE", "RUMA") & Group == 5 ~ "Seeded",
TRUE ~ "Native"))%>%  #make a new column for species status
group_by(Block, Plot, Density, Group, Status) %>% #group by the plot and species status
summarise(PC = sum(Percent_Cover, na.rm = TRUE)) %>%  #calculate totals
pivot_wider(names_from = Status,
values_from = PC) #make wide again
#remove NAs and 0s - make one half the smallest value
fb2$Seeded[fb2$Seeded %in% c(0, NA)] <- 0.0025
mdf.m1 <- glmmTMB(Seeded ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
# Do it again but only with the seeded, not the control ####
#Can't compare the treatments to the control in terms of seeded the way I currently have it,
#so just did the comparison between the treatments
fb2 <-fb %>%
select(Block, Plot, Group, Density, Date, PHAU, Cheno, Typha,
BOMA, DISP, EUMA, SYCI, LEFA, SCAC, BICE, BIFR, EUOC, MUAS, SCAM, RUMA,
RUST, Unk_Bulrush, SARU, Tamarisk) %>%  #remove unnecessary columns
filter(Date == "2022-09-16") %>%  #only the last sampling date
pivot_longer(
cols = 6:24,
names_to = "SPP",
values_to = "Percent_Cover"
) %>% #pivot so that all species names are in one column
mutate(Status = case_when(
SPP %in% c("PHAU", "TYPHA", "RUST", "Tamarisk") ~ "Invasive",
SPP %in% c("BOMA", "SCAC", "SCAM") & Group == 4 ~ "Seeded",
SPP %in% c("DISP", "MUAS") & Group == 3 ~ "Seeded",
SPP %in% c("EUOC", "EUMA") & Group == 1 ~ "Seeded",
SPP %in% c("SYCI", "BICE", "RUMA") & Group == 5 ~ "Seeded",
TRUE ~ "Native"))%>%  #make a new column for species status
group_by(Block, Plot, Density, Group, Status) %>% #group by the plot and species status
summarise(PC = sum(Percent_Cover, na.rm = TRUE)) %>%  #calculate totals
pivot_wider(names_from = Status,
values_from = PC) #make wide again
#remove NAs and 0s - make one half the smallest value
fb2$Seeded[fb2$Seeded %in% c(0, NA)] <- 0.0025
mdf.m1 <- glmmTMB(Seeded ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf.m1 <- glmmTMB(Seeded ~ Group * Density #* for interaction
+ (1|Block),
data = fb2,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1) #don't use this summary
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= useData$Density) #must have data for every factor level
mdf.m1 <- glmmTMB(Seeded ~ Group + Density #* for interaction
+ (1|Block),
data = fb2,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1) #don't use this summary
mdf.m1 <- glmmTMB(Seeded ~ Group * Density #* for interaction
+ (1|Block),
data = fb2,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1) #don't use this summary
#remove NAs and 0s - make one half the smallest value
fb2$Seeded[fb2$Seeded %in% c(0, NA)] <- 0.0025
fb2$Seeded
unique(fb$Block)
unique(fb$Density)
unique(fb$Group)
unique(fb$Plot)
mdf.m1 <- glmmTMB(Seeded ~ Group * Density #* for interaction
+ (1|Block),
data = fb2,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf.m1 <- glmmTMB(Seeded ~ Group * Density #* for interaction
+ (1|Block),
data = fb2,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf.m1 <- glmmTMB(log(Seeded) ~ Group * Density #* for interaction
+ (1|Block),
data = fb2,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf.m1 <- glmmTMB(sqrt(Seeded) ~ Group * Density #* for interaction
+ (1|Block),
data = fb2,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1) #don't use this summary
mdf.m1 <- glmmTMB(Seeded ~ Group * Density #* for interaction
+ (1|Block),
data = fb2,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1) #don't use this summary
mdf.m1 <- glmmTMB(Seeded ~ Group * Density #* for interaction
+ (1|Block),
data = fb2,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf.m1 <- glmmTMB(Seeded ~ Group + Density #* for interaction
+ (1|Block),
data = fb2,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf.m1 <- glmmTMB(Seeded ~ Group * Density #* for interaction
+ (1|Block),
data = fb2,
family = beta_family())
mdf.m1 <- glmmTMB(Seeded ~ Group * Density #* for interaction
+ (1|Block),
data = fb2,
family = normal())
source("~/Documents/USUClasses/Thesis_Code/Field22/Code/Modeling.R", echo=TRUE)
mdf.m1 <- glmmTMB(Seeded ~ Group * Density #* for interaction
+ (1|Block),
data = fb2)
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
# Do it again but only with the seeded, not the control ####
#Can't compare the treatments to the control in terms of seeded the way I currently have it,
#so just did the comparison between the treatments
fb2 <-fb %>%
select(Block, Plot, Group, Density, Date, PHAU, Cheno, Typha,
BOMA, DISP, EUMA, SYCI, LEFA, SCAC, BICE, BIFR, EUOC, MUAS, SCAM, RUMA,
RUST, Unk_Bulrush, SARU, Tamarisk) %>%  #remove unnecessary columns
filter(Date == "2022-09-16") %>%  #only the last sampling date
pivot_longer(
cols = 6:24,
names_to = "SPP",
values_to = "Percent_Cover"
) %>% #pivot so that all species names are in one column
mutate(Status = case_when(
SPP %in% c("PHAU", "TYPHA", "RUST", "Tamarisk") ~ "Invasive",
SPP %in% c("BOMA", "SCAC", "SCAM") & Group == 4 ~ "Seeded",
SPP %in% c("DISP", "MUAS") & Group == 3 ~ "Seeded",
SPP %in% c("EUOC", "EUMA") & Group == 1 ~ "Seeded",
SPP %in% c("SYCI", "BICE", "RUMA") & Group == 5 ~ "Seeded",
TRUE ~ "Native"))%>%  #make a new column for species status
group_by(Block, Plot, Density, Group, Status) %>% #group by the plot and species status
summarise(PC = sum(Percent_Cover, na.rm = TRUE)) %>%  #calculate totals
pivot_wider(names_from = Status,
values_from = PC) %>%  #make wide again
filter(Density != "C") #idk I did this before, I think to converge
#remove NAs and 0s - make one half the smallest value
fb2$Seeded[fb2$Seeded %in% c(0, NA)] <- 0.0025
fb2$Group <- factor(fb2$Group)
fb2$Density <- factor(fb2$Density)
mdf.m1 <- glmmTMB(Seeded ~ Group * Density #* for interaction
+ (1|Block),
data = fb2,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1) #don't use this summary
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= useData$Density) #must have data for every factor level
emmip(mdf.m1, Group~Density, CIs = T) #looks significant without CI but the CI shows it isn't
car::Anova(mdf.m1) #no interaction but at least one group different from another
summary(mdf.m1) #don't use this summary
emmip(mdf.m1, Group~Density, CIs = T)
emmeans(mdf.m1, pairwise~Group, type = 'response')
library(multcmp)
library(multcomp)
em1 <- emmeans(mdf.m1, pairwise~Group, type = 'response')
data <- multcomp::cld(em1, alpha = 0.05, letters = letters)
emmeans(mdf.m1, pairwise~Group, type = 'response', adjust = 'tukey')
em1 <- emmeans(mdf.m1, pairwise~Group, type = 'response', adjust = 'tukey')
data <- multcomp::cld(em1, alpha = 0.05, letters = letters)
emm1 <- emmeans(mdf.m1, pairwise~Group, type = 'response', adjust = 'tukey')
data <- multcomp::cld(emm1, alpha = 0.05, letters = letters)
data1 <- multcomp::cld(emm1, alpha = 0.05, Letters = letters)
emm1 <- emmeans(mdf.m1, pairwise~Group, type = 'response', adjust = 'tukey')
data1 <- multcomp::cld(emm1, alpha = 0.05, Letters = letters)
emm1 <- emmeans(mdf.m1, pairwise~Group, CIs = T, type = 'response', adjust = 'tukey')
data1 <- multcomp::cld(emm1, alpha = 0.05, Letters = letters)
emm1
data1
ggplot(aes(x = Group, y = Seeded * 100))
ggplot(data = fb2, aes(x = Group, y = Seeded * 100))
ggplot(data = fb2, aes(x = Group, y = Seeded * 100)) +
geom_point()
ggplot(data = fb2, aes(x = Group, y = Seeded * 100)) +
geom_point() +
stat_summary(aes(group = Group), #calculate means of the total cover
fun = mean, geom = "point", size = 2) +
stat_summary(aes(group = Group, width = 0), #calculate error bars
fun.data = mean_se, geom = "errorbar", size = 1)
ggplot(data = fb2, aes(x = Group, y = Seeded * 100)) +
stat_summary(aes(group = Group), #calculate means of the total cover
fun = mean, geom = "point", size = 2) +
stat_summary(aes(group = Group, width = 0), #calculate error bars
fun.data = mean_se, geom = "errorbar", size = 1)
data1
ggplot(data = fb2, aes(x = Group, y = Seeded * 100)) +
stat_summary(aes(group = Group), #calculate means of the total cover
fun = mean, geom = "point", size = 2) +
stat_summary(aes(group = Group, width = 0), #calculate error bars
fun.data = mean_se, geom = "errorbar", size = 1) +
geom_text(aes(label = .group,  y = Seeded + 5))
ggplot(data = fb2, aes(x = Group, y = Seeded * 100)) +
stat_summary(aes(group = Group), #calculate means of the total cover
fun = mean, geom = "point", size = 2) +
stat_summary(aes(group = Group, width = 0), #calculate error bars
fun.data = mean_se, geom = "errorbar", size = 1) +
geom_text(aes(label = .group,  y = Seeded))
ggplot(data = data1, aes(x = Group, y = Seeded * 100)) +
stat_summary(aes(group = Group), #calculate means of the total cover
fun = mean, geom = "point", size = 2) +
stat_summary(aes(group = Group, width = 0), #calculate error bars
fun.data = mean_se, geom = "errorbar", size = 1) +
geom_text(aes(label = .group,  y = Seeded))
data1
ggplot(data = data1, aes(x = Group, y = response * 100)) +
stat_summary(aes(group = Group), #calculate means of the total cover
fun = mean, geom = "point", size = 2) +
stat_summary(aes(group = Group, width = 0), #calculate error bars
fun.data = mean_se, geom = "errorbar", size = 1) +
geom_text(aes(label = .group,  y = Seeded))
ggplot(data = data1, aes(x = Group, y = response * 100)) +
stat_summary(aes(group = Group), #calculate means of the total cover
fun = mean, geom = "point", size = 2) +
stat_summary(aes(group = Group, width = 0), #calculate error bars
fun.data = mean_se, geom = "errorbar", size = 1) +
geom_text(aes(label = .group,  y = response))
ggplot(data = data1, aes(x = Group, y = response * 100)) +
stat_summary(aes(group = Group), #calculate means of the total cover
fun = mean, geom = "point", size = 2) +
stat_summary(aes(group = Group, width = 0), #calculate error bars
fun.data = mean_se, geom = "errorbar", size = 1) +
geom_text(aes(label = .group,  y = response * 100))
ggplot(data = data1, aes(x = Group, y = response * 100)) +
stat_summary(aes(group = Group), #calculate means of the total cover
fun = mean, geom = "point", size = 2) +
stat_summary(aes(group = Group, width = 0), #calculate error bars
fun.data = mean_se, geom = "errorbar", size = 1) +
geom_text(aes(label = .group,  y = response * 100),
nudge_x = 0.2)
ggplot(data = data1, aes(x = Group, y = response * 100)) +
geom_text(aes(label = .group,  y = response * 100),
nudge_x = 0.2)
ggplot(data = data1, aes(x = Group, y = response * 100)) +
geom_point() +
geom_errorbar(ymin = 100*(response - SE),
ymax = 100*(response+SE)) +
geom_text(aes(label = .group,  y = response * 100),
nudge_x = 0.2)
ggplot(data = data1, aes(x = Group, y = response * 100)) +
geom_point() +
geom_errorbar(aes(ymin = 100*(response - SE),
ymax = 100*(response+SE))) +
geom_text(aes(label = .group,  y = response * 100),
nudge_x = 0.2)
ggplot(data = data1, aes(x = Group, y = response * 100)) +
geom_point() +
geom_errorbar(aes(ymin = 100*(response - SE),
ymax = 100*(response+SE)),
width=0, size=0.5) +
geom_text(aes(label = .group,  y = response * 100),
nudge_x = 0.2)
ggplot(data = data1, aes(x = Group, y = response * 100)) +
geom_point(size=2) +
geom_errorbar(aes(ymin = 100*(response - SE),
ymax = 100*(response+SE)),
width=0, size=0.5) +
geom_text(aes(label = .group,  y = response * 100),
nudge_x = 0.2)
ggplot(data = data1, aes(x = Group, y = response * 100)) +
geom_point(size=2) +
geom_errorbar(aes(ymin = 100*(response - SE),
ymax = 100*(response+SE)),
width=0, size=0.5) +
labs(x="Seed Mix", y = "Model predicted percent cover")
ggsave("model_means_seeded_cover.jpeg")
ggsave("model_means_seeded_fb.jpeg")
#ul ##
ul2 <- ul%>%
select(Block, Plot, Group, Density, Date, PHAU, BOMA, BICE, CYER, RUMA,
Cheno, SCAC, SCPU, SCAM, DISP, RACY, ASIN, ALPR, CYDA, Unk_Bulrush, BY, SYCI,
EUOC, TYPHA, Tamarisk, POPE, POFR, SAAM, BASC, LASE) %>%
filter(Date == "2022-09-16") %>%
pivot_longer(
cols = 6:30,
names_to = "SPP",
values_to = "Percent_Cover"
) %>%
mutate(Status = case_when(
SPP %in% c("PHAU", "TYPHA", "RUST",
"Tamarisk", "ALPR", "CYDA", "BY",
"BASC", "LASE") ~ "Invasive",
SPP %in% c("BOMA", "SCAC", "SCAM") & Group == 4 ~ "Seeded",
SPP == "DISP" & Group == 3 ~ "Seeded",
SPP == "EUOC" & Group == 1 ~ "Seeded",
SPP %in% c("SYCI", "BICE", "RUMA") & Group == 5 ~ "Seeded",
TRUE ~ "Native"
))%>%
mutate(Plot = case_when(
Plot == "1H" ~ "Perennial forbs (high)",
Plot == "1L" ~ "Perennial forbs (low)",
Plot == "2H" ~ "Rushes (high)",
Plot == "2L" ~ "Rushes (low)",
Plot == "3H" ~ "Grasses (high)",
Plot == "3L" ~ "Grasses (low)",
Plot == "4H" ~ "Bulrushes (high)",
Plot == "4L" ~ "Bulrushes (low)",
Plot == "5H" ~ "Annual forbs (high)",
Plot == "5L" ~ "Annual forbs (low)",
Plot == "C" ~ "Control",
TRUE ~ "PROBLEM"
))
#ul ##
ul2 <- ul%>%
select(Block, Plot, Group, Density, Date, PHAU, BOMA, BICE, CYER, RUMA,
Cheno, SCAC, SCPU, SCAM, DISP, RACY, ASIN, ALPR, CYDA, Unk_Bulrush, BY, SYCI,
EUOC, TYPHA, Tamarisk, POPE, POFR, SAAM, BASC, LASE) %>%
filter(Date == "2022-09-16") %>%
pivot_longer(
cols = 6:30,
names_to = "SPP",
values_to = "Percent_Cover"
) %>%
mutate(Status = case_when(
SPP %in% c("PHAU", "TYPHA", "RUST",
"Tamarisk", "ALPR", "CYDA", "BY",
"BASC", "LASE") ~ "Invasive",
SPP %in% c("BOMA", "SCAC", "SCAM") & Group == 4 ~ "Seeded",
SPP == "DISP" & Group == 3 ~ "Seeded",
SPP == "EUOC" & Group == 1 ~ "Seeded",
SPP %in% c("SYCI", "BICE", "RUMA") & Group == 5 ~ "Seeded",
TRUE ~ "Native"
))%>%
mutate(Plot = case_when(
Plot == "1H" ~ "Perennial forbs (high)",
Plot == "1L" ~ "Perennial forbs (low)",
Plot == "2H" ~ "Rushes (high)",
Plot == "2L" ~ "Rushes (low)",
Plot == "3H" ~ "Grasses (high)",
Plot == "3L" ~ "Grasses (low)",
Plot == "4H" ~ "Bulrushes (high)",
Plot == "4L" ~ "Bulrushes (low)",
Plot == "5H" ~ "Annual forbs (high)",
Plot == "5L" ~ "Annual forbs (low)",
Plot == "C" ~ "Control",
TRUE ~ "PROBLEM"
)) %>%
group_by(Block, Plot, Density, Group, Status) %>% #group by the plot and species status
summarise(PC = sum(Percent_Cover, na.rm = TRUE)) %>%  #calculate totals
pivot_wider(names_from = Status,
values_from = PC) %>%  #make wide again
filter(Density != "C") #idk I did this before, I think to converge
#ul ##
ul2 <- ul%>%
select(Block, Plot, Group, Density, Date, PHAU, BOMA, BICE, CYER, RUMA,
Cheno, SCAC, SCPU, SCAM, DISP, RACY, ASIN, ALPR, CYDA, Unk_Bulrush, BY, SYCI,
EUOC, TYPHA, Tamarisk, POPE, POFR, SAAM, BASC, LASE) %>%
filter(Date == "2022-09-16") %>%
pivot_longer(
cols = 6:30,
names_to = "SPP",
values_to = "Percent_Cover"
) %>%
mutate(Status = case_when(
SPP %in% c("PHAU", "TYPHA", "RUST",
"Tamarisk", "ALPR", "CYDA", "BY",
"BASC", "LASE") ~ "Invasive",
SPP %in% c("BOMA", "SCAC", "SCAM") & Group == 4 ~ "Seeded",
SPP == "DISP" & Group == 3 ~ "Seeded",
SPP == "EUOC" & Group == 1 ~ "Seeded",
SPP %in% c("SYCI", "BICE", "RUMA") & Group == 5 ~ "Seeded",
TRUE ~ "Native"
))%>%
mutate(Plot = case_when(
Plot == "1H" ~ "Perennial forbs (high)",
Plot == "1L" ~ "Perennial forbs (low)",
Plot == "2H" ~ "Rushes (high)",
Plot == "2L" ~ "Rushes (low)",
Plot == "3H" ~ "Grasses (high)",
Plot == "3L" ~ "Grasses (low)",
Plot == "4H" ~ "Bulrushes (high)",
Plot == "4L" ~ "Bulrushes (low)",
Plot == "5H" ~ "Annual forbs (high)",
Plot == "5L" ~ "Annual forbs (low)",
Plot == "C" ~ "Control",
TRUE ~ "PROBLEM"
))
ul2 <- ul%>%
select(Block, Plot, Group, Density, Date, PHAU, BOMA, BICE, CYER, RUMA,
Cheno, SCAC, SCPU, SCAM, DISP, RACY, ASIN, ALPR, CYDA, Unk_Bulrush, BY, SYCI,
EUOC, TYPHA, Tamarisk, POPE, POFR, SAAM, BASC, LASE) %>%
filter(Date == "2022-09-16") %>%
pivot_longer(
cols = 6:30,
names_to = "SPP",
values_to = "Percent_Cover"
)
load("clean_dfs.RData")
library(tidyverse)
library(RColorBrewer)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
ul%>%
select(Block, Plot, Group, Density, Date, PHAU, BOMA, BICE, CYER, RUMA,
Cheno, SCAC, SCPU, SCAM, DISP, RACY, ASIN, ALPR, CYDA, Unk_Bulrush, BY, SYCI,
EUOC, TYPHA, Tamarisk, POPE, POFR, SAAM, BASC, LASE)
View(ul)
select(ul$BOMA)
ul%>%
select(Block, Plot, Group, Density, Date, PHAU, BOMA, BICE, CYER, RUMA,
Cheno, SCAC, SCPU, SCAM, DISP, RACY, ASIN, ALPR, CYDA, Unk_Bulrush, BY, SYCI,
EUOC, TYPHA, Tamarisk, POPE, POFR, SAAM, BASC, LASE)
glimpse(ul)
ul%>%
select(Block, Plot, Group, Density, Date, PHAU, BOMA, BICE, CYER, RUMA,
Cheno, SCAC, SCPU, SCAM, DISP, RACY, ASIN, ALPR, CYDA, Unk_Bulrush, BY, SYCI,
EUOC, TYPHA, Tamarisk, POPE, POFR, SAAM, BASC, LASE)
