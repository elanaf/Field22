emmeans(mdf.m1, specs = trt.vs.ctrlk~gd,ref = 3) #reference group is the third option (10:C)
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
useData <- filter(mdf, Density != "C") #to make the plotResiduals work
useData$Group <- factor(useData$Group)
useData$Density <- factor(useData$Density)
mdf.m1 <- glmmTMB(Invasive.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
mdf$gd <- factor(mdf$Group:mdf$Density)
mdf.m1 <- glmmTMB(Native.Cover ~ gd #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$gd)
#Dunnetts test - type 1 error control, comparing the control to each of 10 other means
#We have inflated type 1 error because we use the control mean 10 times
#We could use a tukeys but that would control for 55 tests and we only need 10 - we will lose all power
#Allows us to just look at control against every other treatment - only the comparisons we want
emmeans(mdf.m1, specs = trt.vs.ctrlk~gd,ref = 3) #reference group is the third option (10:C)
mdf.m2 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m2)
mdf.m2 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = filter(mdf, Density != "C"),
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m2)
simulateResiduals(mdf.m2, plot = T)
mdf.m2 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m2)
simulateResiduals(mdf.m2, plot = T)
plotResiduals(mdf.m2, form= useData$Density) #must have data for every factor level
emmip(mdf.m2, Group~Density)
car::Anova(mdf.m2)
emmip(mdf.m2, Group~Density, CIs = T)
emmip(mdf.m2, Group~Density, CIs = T, type = "response")
emmeans(mdf.m2, pairwise~Group)
emmeans(mdf.m2, pairwise~Group, adjust = "none")
##Model - does invasive cover change with plot?
mdf <- ul %>%
filter(Date == "2022-09-16")
useData <- filter(mdf, Density != "C") #to make the plotResiduals work
useData$Group <- factor(useData$Group)
useData$Density <- factor(useData$Density)
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m3 <- glmmTMB(Invasive.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m3 <- glmmTMB(Invasive.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m3)
simulateResiduals(mdf.m3, plot = T)
plotResiduals(mdf.m3, form= useData$Density)
hist(useData$Native.Cover)
mdf.m4 <- glmmTMB(log(Native.Cover) ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m4)
simulateResiduals(mdf.m4, plot = T)
plotResiduals(mdf.m4, form= mdf$Density)
mdf.m4 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
car::Anova(mdf.m4)
emmip(mdf.m4, Group~Density)
emmip(mdf.m4, Density ~ Group)
emmip(mdf.m4, Density ~ Group, CIs = T)
summary(mdf.m3) #don't use this summary
load("../clean_dfs.RData")
load("../clean_dfs.RData")
getwd()
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
useData <- filter(mdf, Density != "C") #to make the plotResiduals work
useData$Group <- factor(useData$Group)
useData$Density <- factor(useData$Density)
##FB Native ####
mdf.m1 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1) #don't use this summary
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
useData <- filter(mdf, Density != "C") #to make the plotResiduals work
useData$Group <- factor(useData$Group)
useData$Density <- factor(useData$Density)
mdf$gd <- factor(mdf$Group:mdf$Density) #compares every combination of treatment and control
mdf.m2 <- glmmTMB(Invasive.Cover ~ gd #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
#Dunnetts test - type 1 error control, comparing the control to each of 10 other means
#We have inflated type 1 error because we use the control mean 10 times
#We could use a tukeys but that would control for 55 tests and we only need 10 - we will lose all power
#Allows us to just look at control against every other treatment - only the comparisons we want
emmeans(mdf.m2, specs = trt.vs.ctrlk~gd,ref = 3) #reference group is the third option (10:C)
##FB native trt vs ctl ####
mdf$gd <- factor(mdf$Group:mdf$Density)
mdf.m3 <- glmmTMB(Native.Cover ~ gd #* for interaction
+ (1|Block),
data = mdf,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
emmeans(mdf.m3, specs = trt.vs.ctrlk~gd,ref = 3) #reference group is the third option (10:C)
##UL Invasive trt vs ctl ####
mdf1$gd <- factor(mdf1$Group:mdf1$Density) #compares every combination of treatment and control
mdf.m5 <- glmmTMB(Invasive.Cover ~ gd #* for interaction
+ (1|Block),
data = mdf1,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
#UL ####
mdf1 <- ul %>%
filter(Date == "2022-09-16")
useData <- filter(mdf1, Density != "C") #to make the plotResiduals work
useData$Group <- factor(useData$Group)
useData$Density <- factor(useData$Density)
##UL Invasive trt vs ctl ####
mdf1$gd <- factor(mdf1$Group:mdf1$Density) #compares every combination of treatment and control
mdf.m5 <- glmmTMB(Invasive.Cover ~ gd #* for interaction
+ (1|Block),
data = mdf1,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
emmeans(mdf.m5, specs = trt.vs.ctrlk~gd,ref = 3) #reference group is the third option (10:C)
##UL Native trt vs ctl ####
### Dunnetts gaussian ####
mdf1$gd <- factor(mdf1$Group:mdf1$Density) #compares every combination of treatment and control
mdf.m9 <- glmmTMB(log(Native.Cover) ~ gd #* for interaction
+ (1|Block),
data = mdf1,
family = gaussian,
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
emmeans(mdf.m9, specs = trt.vs.ctrlk~gd,ref = 3) #reference group is the third option (10:C)
##FB Invasive ####
mdf.m4 <- glmmTMB(Invasive.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
car::Anova(mdf.m4) #no interaction but densities different and at least one group different
emmip(mdf.m4, Group~Density, CIs = T, type = "response") #shows on the level of the response
emmeans(mdf.m4, pairwise~Group) #only 4 and 5 different when adjusted for tukey
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
useData <- filter(mdf, Density != "C") #to make the plotResiduals work
useData$Group <- factor(useData$Group)
useData$Density <- factor(useData$Density)
##FB Native ####
mdf.m1 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1) #don't use this summary
simulateResiduals(mdf.m1, plot = T)
emmip(mdf.m1, Group~Density, CIs = T) #looks significant without CI but the CI shows it isn't
car::Anova(mdf.m1) #no interaction but at least one group different from another
emmip(mdf.m1, Group~Density, CIs = T, type = "response") #shows on the level of the response
emmeans(mdf.m1, pairwise~Group) #not significant when adjusted for the tukey test
emmeans(mdf.m1, pairwise~Group, adjust = "none") #a more liberal test shows what we expected above with the groups
##FB Invasive ####
mdf.m4 <- glmmTMB(Invasive.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
emmip(mdf.m4, Group~Density, CIs = T) #looks significant without CI but the CI shows it isn't
car::Anova(mdf.m4) #no interaction but densities different and at least one group different
emmeans(mdf.m4, pairwise~Group) #only 4 and 5 different when adjusted for tukey
emmeans(mdf.m4, pairwise~Density) #not significant but almost significant when adjusted for with tukey
emmeans(mdf.m4, pairwise~Group) #only 4 and 5 different when adjusted for tukey
emmeans(mdf.m4, pairwise~Density) #not significant but almost significant when adjusted for with tukey
#UL ####
mdf1 <- ul %>%
filter(Date == "2022-09-16")
useData <- filter(mdf1, Density != "C") #to make the plotResiduals work
useData$Group <- factor(useData$Group)
useData$Density <- factor(useData$Density)
##UL Invasive ####
mdf.m6 <- glmmTMB(Invasive.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
car::Anova(mdf.m6) #nothing significant
?car::Anova
###Log normal ####
#this log normal one is good enough and shows nothing significant
mdf.m7 <- glmmTMB(log(Native.Cover) ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
car::Anova(mdf.m7) #nothing significant
emmip(mdf.m7, Group~Density, CIs = T)
emmip(mdf.m4, Group~Density, CIs = T, type = "response") #shows on the level of the response
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
useData <- filter(mdf, Density != "C") #to make the plotResiduals work
useData$Group <- factor(useData$Group)
useData$Density <- factor(useData$Density)
##FB Invasive ####
mdf.m4 <- glmmTMB(Invasive.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
emmip(mdf.m4, Group~Density, CIs = T) #looks significant without CI but the CI shows it isn't
car::Anova(mdf.m4) #no interaction but densities different and at least one group different
emmip(mdf.m4, Group~Density, CIs = T, type = "response") #shows on the level of the response
.libPaths()
?reinstalling
remotes::install_github("glmmTMB/glmmTMB/glmmTMB")
install.packages("remotes")
remotes::install_github("glmmTMB/glmmTMB/glmmTMB").
remotes::install_github("glmmTMB/glmmTMB/glmmTMB")
options(contrasts = c("contr.sum", "contr.poly"))
devtools::install_version("TMB", version = "1.9.1")
install.packages("devtools")
devtools::install_version("TMB", version = "1.9.1")
library(gridExtra)
remove.packages("TMB")
devtools::install.packages("TMB", version = "1.9.1")
devtools::install_packages("TMB", version = "1.9.1")
devtools::install_package("TMB", version = "1.9.1")
?install.package
devtools::install_version("TMB", version = "1.9.1")
library(magrittr)
library(TMB)
install.packages("TMB")
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
install.packages("TMB")
library(TMB)
install.packages("TMB")
library(TMB)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
useData <- filter(mdf, Density != "C") #to make the plotResiduals work
useData$Group <- factor(useData$Group)
useData$Density <- factor(useData$Density)
##FB Native ####
mdf.m1 <- glmmTMB(Native.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1) #don't use this summary
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= useData$Density) #must have data for every factor level
emmip(mdf.m1, Group~Density, CIs = T) #looks significant without CI but the CI shows it isn't
car::Anova(mdf.m1) #no interaction but at least one group different from another
#Dunnetts test - type 1 error control, comparing the control to each of 10 other means
#We have inflated type 1 error because we use the control mean 10 times
#We could use a tukeys but that would control for 55 tests and we only need 10 - we will lose all power
#Allows us to just look at control against every other treatment - only the comparisons we want
emmeans(mdf.m2, specs = trt.vs.ctrlk~gd,ref = 3) #reference group is the third option (10:C)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
useData <- filter(mdf, Density != "C") #to make the plotResiduals work
useData$Group <- factor(useData$Group)
useData$Density <- factor(useData$Density)
##FB Invasive ####
mdf.m4 <- glmmTMB(Invasive.Cover ~ Group * Density #* for interaction
+ (1|Block),
data = useData,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m4)
simulateResiduals(mdf.m4, plot = T)
plotResiduals(mdf.m4, form= useData$Density)
##FB Invasive trt vs ctl ####
mdf$gd <- factor(mdf$Group:mdf$Density) #compares every combination of treatment and control
mdf.m2 <- glmmTMB(Invasive.Cover ~ gd #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m2) #don't use this summary
simulateResiduals(mdf.m2, plot = T)
plotResiduals(mdf.m2, form= mdf$gd)
#Dunnetts test - type 1 error control, comparing the control to each of 10 other means
#We have inflated type 1 error because we use the control mean 10 times
#We could use a tukeys but that would control for 55 tests and we only need 10 - we will lose all power
#Allows us to just look at control against every other treatment - only the comparisons we want
emmeans(mdf.m2, specs = trt.vs.ctrlk~gd,ref = 3) #reference group is the third option (10:C)
#Dunnetts test - type 1 error control, comparing the control to each of 10 other means
#We have inflated type 1 error because we use the control mean 10 times
#We could use a tukeys but that would control for 55 tests and we only need 10 - we will lose all power
#Allows us to just look at control against every other treatment - only the comparisons we want
emmeans(mdf.m2, specs = trt.vs.ctrlk~gd,ref = 3, type = response) #reference group is the third option (10:C)
#Dunnetts test - type 1 error control, comparing the control to each of 10 other means
#We have inflated type 1 error because we use the control mean 10 times
#We could use a tukeys but that would control for 55 tests and we only need 10 - we will lose all power
#Allows us to just look at control against every other treatment - only the comparisons we want
emmeans(mdf.m2, specs = trt.vs.ctrlk~gd,ref = 3, type = "response") #reference group is the third option (10:C)
emmeans(mdf.m3, specs = trt.vs.ctrlk~gd,ref = 3, type = "response") #reference group is the third option (10:C)
##FB native trt vs ctl ####
mdf$gd <- factor(mdf$Group:mdf$Density)
mdf.m3 <- glmmTMB(Native.Cover ~ gd #* for interaction
+ (1|Block),
data = mdf,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
emmeans(mdf.m3, specs = trt.vs.ctrlk~gd,ref = 3, type = "response") #reference group is the third option (10:C)
emmeans(mdf.m3, specs = trt.vs.ctrlk~gd,ref = 3) #reference group is the third option (10:C)
