SPP %in%
c("PHAU", "Typha", "Rust", "Tamarisk"),
"Invasive", "Native"))
View(fb_split)
mdf <- fb_split
mdf$Group <- as.factor(mdf$Group)
mdf$Density <- as.factor(mdf$Density)
mdf.m1 <- glmmTMB(Percent.Cover ~ Group + Density + Status #* for interaction
+ (1|Block),
data = mdf,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
View(mdf)
mdf.m1 <- glmmTMB(Percent_Cover ~ Group + Density + Status #* for interaction
+ (1|Block),
data = mdf,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf.m1 <- glmmTMB(Percent_Cover ~ Density + Status #* for interaction
+ (1|Block),
data = mdf,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
mdf.m1 <- glmmTMB(Percent_Cover ~ Density + Group #* for interaction
+ (1|Block),
data = mdf,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf.m1 <- glmmTMB(Percent_Cover ~ Status + Group #* for interaction
+ (1|Block),
data = mdf,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
mdf.m1 <- glmmTMB(Percent_Cover ~ Status * Group #* for interaction
+ (1|Block),
data = mdf,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
library(car)
Anova(mdf.m1) #no evidence of significant differences
emmip(mdf.m1, Status~Group, CIs = T)
mdf.m1 <- glmmTMB(Percent_Cover ~ Status * Group #* for interaction
+ (1|Block),
data = mdf,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
library(car)
Anova(mdf.m1) #no evidence of significant differences
emmip(mdf.m1, Status~Group, CIs = T)
mdf.m1 <- glmmTMB(Percent_Cover ~ Status * Density #* for interaction
+ (1|Block),
data = mdf,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
library(car)
Anova(mdf.m1) #no evidence of significant differences
emmip(mdf.m1, Status~Group, CIs = T)
emmip(mdf.m1, Density~Group, CIs = T)
emmip(mdf.m1, Status~Density, CIs = T)
mdf <- fb_split %>%
filter(Status == "Native")
mdf$Group <- as.factor(mdf$Group)
mdf$Density <- as.factor(mdf$Density)
mdf.m1 <- glmmTMB(Percent_Cover ~ Group * Density #* for interaction
+ (1|Block),
data = mdf,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
mdf.m1 <- glmmTMB(Percent_Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
library(car)
Anova(mdf.m1) #no evidence of significant differences
emmip(mdf.m1, Status~Density, CIs = T)
emmip(mdf.m1, Group~Density, CIs = T)
View(mdf.m1)
View(mdf)
emmip(mdf.m1, Density~Group, CIs = T)
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
####FB
#summarize the cover of all the natives and invasives (from graphing code)
#Pivot table so columns are response but species are rows
fb_short <- fb[-c(28,6, 23, 24, 29, 30, 31)] #removing notes column and things we don't want calculated (unknowns and total cover and measurements)
fb_end <- fb_short %>% #make it so it is only the final date
filter(Date == "2022-09-16")
fb_long <- fb_end %>% #pivot the table
tidyr::pivot_longer(
cols = 6:24,
names_to = "SPP",
values_to = "Percent_Cover"
)
#groups natives and invasives
fb_split<- fb_long %>%
dplyr::mutate(Status =
dplyr::if_else(
SPP %in%
c("PHAU", "Typha", "Rust", "Tamarisk"),
"Invasive", "Native"))
View(fb_split)
#make all cover values 0 < y < 1
fb_split$Percent_Cover <- fb_split$Percent_Cover/100
#get rid of 0s
fb_split$Percent_Cover[fb_split$Percent_Cover == 0] <- 0.005 #make 0s a trace amount - could be half the smallest amount
#get rid of NAs
fb_split$Percent_Cover[is.na(fb_split$Percent_Cover)] <- 0.005 #make 0s a trace amount - could be half the smallest amount
##Model - does invasive cover change with plot?
mdf <- fb_split %>%
filter(Status == "Invasive")
mdf$Group <- as.factor(mdf$Group)
mdf$Density <- as.factor(mdf$Density)
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
##Model - does invasive cover change with plot?
mdf <- fb_split %>%
filter(Status == "Invasive")
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m1 <- glmmTMB(Percent_Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m1 <- glmmTMB(Percent_Cover ~ Group * Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Density)
simulateResiduals(mdf.m1, plot = T)
##Model - does native cover change with plot?
mdf <- fb_split%>%
filter(Status == "Native")
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m2 <- glmmTMB(Native ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m2 <- glmmTMB(Percent_Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m2)
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m2 <- glmmTMB(Percent_Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m2 <- glmmTMB(Percent_Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
####FB
#summarize the cover of all the natives and invasives (from graphing code)
#Pivot table so columns are response but species are rows
fb_short <- fb[-c(28,6, 23, 24, 29, 30, 31)] #removing notes column and things we don't want calculated (unknowns and total cover and measurements)
fb_end <- fb_short %>% #make it so it is only the final date
filter(Date == "2022-09-16")
fb_long <- fb_end %>% #pivot the table
tidyr::pivot_longer(
cols = 6:24,
names_to = "SPP",
values_to = "Percent_Cover"
)
#groups natives and invasives
fb_split<- fb_long %>%
dplyr::mutate(Status =
dplyr::if_else(
SPP %in%
c("PHAU", "Typha", "Rust", "Tamarisk"),
"Invasive", "Native"))
#make all cover values 0 < y < 1
fb_split$Percent_Cover <- fb_split$Percent_Cover/100
##Model - does invasive cover change with plot?
mdf <- fb_split %>%
filter(Status == "Invasive")
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m1 <- glmmTMB(Percent_Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Density)
##Model - does native cover change with plot?
mdf <- fb_split%>%
filter(Status == "Native")
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m2 <- glmmTMB(Percent_Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m2)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Density)
####UL
ul_short <- ul[-c(6, 7, 9, 21, 35, 36, 37, 38)] #removing notes column and things we don't want calculated (unknowns and total cover and measurements)
ul_end <- ul_short %>% #make it so it is only the final date
filter(Date == "2022-09-16")
####UL
ul_short <- ul[-c(6, 7, 9, 21, 35, 36, 37, 38)] #removing notes column and things we don't want calculated (unknowns and total cover and measurements)
ul_end <- ul_short %>% #make it so it is only the final date
filter(Date == "2022-09-16")
ul_wide <- ul_end %>% #pivot the table
tidyr::pivot_longer(
cols = 6:30,
names_to = "SPP",
values_to = "Percent_Cover"
)
#groups natives and invasives
ul_split<- ul_wide %>%
dplyr::mutate(Status =
dplyr::if_else(
SPP %in%
c("PHAU", "TYPHA", "Rust", "Tamarisk", "ALPR", "CYDA", "BY",
"BASC", "LASE"),
"Invasive", "Native"))
#make all cover values 0 < y < 1
ul_split$Percent_Cover <- ul_split$Percent_Cover/100
##Model - does invasive cover change with plot?
mdf <- ul_split%>%
filter(Status == "Invasive")
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m3 <- glmmTMB(Percent_Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
summary(mdf.m3)
##Model - does native cover change with plot?
mdf <- ul_split%>%
filter(Status == "Native")
mdf.m4 <- glmmTMB(Percent_Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m4)
load("clean_dfs.RData")
install.packages('TMB', type = 'source')
install.packages("TMB", type = "source")
install.packages("TMB", type = "source")
install.packages("TMB", type = "source")
load("clean_dfs.RData")
remove.packages("glmmTMB")
install.packages("glmmTMB")
load("clean_dfs.RData")
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
####FB
#summarize the cover of all the natives and invasives (from graphing code)
#Pivot table so columns are response but species are rows
fb_short <- fb[-c(28,6, 23, 24, 29, 30, 31)] #removing notes column and things we don't want calculated (unknowns and total cover and measurements)
fb_end <- fb_short %>% #make it so it is only the final date
filter(Date == "2022-09-16")
fb_long <- fb_end %>% #pivot the table
tidyr::pivot_longer(
cols = 6:24,
names_to = "SPP",
values_to = "Percent_Cover"
)
#groups natives and invasives
fb_split<- fb_long %>%
dplyr::mutate(Status =
dplyr::if_else(
SPP %in%
c("PHAU", "Typha", "Rust", "Tamarisk"),
"Invasive", "Native"))
#make all cover values 0 < y < 1
fb_split$Percent_Cover <- fb_split$Percent_Cover/100
#get rid of NAs
fb_split$Percent_Cover[is.na(fb_split$Percent_Cover)] <- 0.005 #make 0s a trace amount - could be half the smallest amount
##Model - does invasive cover change with plot?
mdf <- fb_split %>%
filter(Status == "Invasive")
#there's not enough data to do the interaction
#i also figured there wasn't enoguh phrag so I did all invasives
mdf.m1 <- glmmTMB(Percent_Cover ~ Group + Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
View(mdf)
View(fb)
fb_short
View(fb_short)
fb_end <- fb %>% filter(Date == "2022-09-16")
View(fb_end)
mdf.m1 <- glmmTMB(Total.Cover ~ Group + Density #* for interaction
+ (1|Block),
data = fb_end,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1)
load("clean_dfs.RData")
library(ggplot2)
library(tidyverse)
library(RColorBrewer)
#Pivot table so columns are response but species are rows
fb_short <- fb[-c(28,6, 23, 24, 29, 30, 31)] #removing notes column and things we don't want calculated (unknowns and total cover and measurements)
fb_end <- fb_short %>% #make it so it is only the final date
filter(Date == "2022-09-16")
fb_wide <- fb_end %>% #pivot the table
tidyr::pivot_longer(
cols = 6:24,
names_to = "SPP",
values_to = "Percent_Cover"
)
#groups natives and invasives
fb_split<- fb_wide %>%
dplyr::mutate(Status =
dplyr::if_else(
SPP %in%
c("PHAU", "Typha", "Rust", "Tamarisk"),
"Invasive", "Native"))
fb_split<-fb_split %>% #and now calculate the total cover for invasive and native for each block and plot
dplyr::group_by(Block, Plot, Status) %>%
dplyr::summarise(PC = sum(Percent_Cover, na.rm = TRUE))
plot_names <- c("Perennial forbs (high)", "Perennial forbs (high)",
"Perennial forbs (low)", "Perennial forbs (low)",
"Rushes (high)", "Rushes (high)", "Rushes (low)", "Rushes (low)",
"Grasses (high)", "Grasses (high)", "Grasses (low)", "Grasses (low)",
"Bulrushes (high)", "Bulrushes (high)", "Bulrushes (low)", "Bulrushes (low)",
"Annual forbs (high)", "Annual forbs (high)", "Annual forbs (low)", "Annual forbs (low)",
"Control", "Control")
fb_split$plot_names <- rep(plot_names, 6)
#Graph of all the plots and total cover - split invasive and native
fb_split %>%
ggplot(aes(x = plot_names, y = PC, color = Status)) +
stat_summary(aes(group = Status),
fun = mean, geom = "point", size = 3) +
stat_summary(aes(group = Status, width = 0),
fun.data = mean_se, geom = "errorbar", size = 1.5) +
labs(x = "Functional Group", y = "Cover (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9)) +
ggtitle("Great Salt Lake")
#Graph of all the plots and total cover - split invasive and native
fb_split %>%
ggplot(aes(x = plot_names, y = PC, color = Status)) +
stat_summary(aes(group = Status),
fun = mean, geom = "point", size = 3) +
stat_summary(aes(group = Status, width = 0),
fun.data = mean_se, geom = "errorbar", size = 1.5) +
labs(x = "Functional Group", y = "Cover (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9)) +
ggtitle("Great Salt Lake") +
ylim(0, 100)
#Graph of all the plots and total cover - split invasive and native
fb_split %>%
ggplot(aes(x = plot_names, y = PC, color = Status)) +
stat_summary(aes(group = Status),
fun = mean, geom = "point", size = 2) +
stat_summary(aes(group = Status, width = 0),
fun.data = mean_se, geom = "errorbar", size = 1.5) +
labs(x = "Functional Group", y = "Cover (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9)) +
ggtitle("Great Salt Lake") +
ylim(0, 100)
#Graph of all the plots and total cover - split invasive and native
fb_split %>%
ggplot(aes(x = plot_names, y = PC, color = Status)) +
stat_summary(aes(group = Status),
fun = mean, geom = "point", size = 2) +
stat_summary(aes(group = Status, width = 0),
fun.data = mean_se, geom = "errorbar", size = 1) +
labs(x = "Functional Group", y = "Cover (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9)) +
ggtitle("Great Salt Lake") +
ylim(0, 100)
ggsave("fb_invasive_native.jpeg",
device = jpeg)
####UL####
#graphs of invasive vs native
#Pivot table so columns are response but species are rows
ul_short <- ul[-c(6, 7, 9, 21, 35, 36, 37, 38)] #removing notes column and things we don't want calculated (unknowns and total cover and measurements)
ul_end <- ul_short %>% #make it so it is only the final date
filter(Date == "2022-09-16")
ul_wide <- ul_end %>% #pivot the table
tidyr::pivot_longer(
cols = 6:30,
names_to = "SPP",
values_to = "Percent_Cover"
)
#groups natives and invasives
ul_split<- ul_wide %>%
dplyr::mutate(Status =
dplyr::if_else(
SPP %in%
c("PHAU", "TYPHA", "Rust", "Tamarisk", "ALPR", "CYDA", "BY",
"BASC", "LASE"),
"Invasive", "Native"))
ul_split<-ul_split %>% #and now calculate the total cover for invasive and native for each block and plot
dplyr::group_by(Block, Plot, Status) %>%
dplyr::summarise(PC = sum(Percent_Cover, na.rm = TRUE))
plot_names <- c("Perennial forbs (high)", "Perennial forbs (high)",
"Perennial forbs (low)", "Perennial forbs (low)",
"Rushes (high)", "Rushes (high)", "Rushes (low)", "Rushes (low)",
"Grasses (high)", "Grasses (high)", "Grasses (low)", "Grasses (low)",
"Bulrushes (high)", "Bulrushes (high)", "Bulrushes (low)", "Bulrushes (low)",
"Annual forbs (high)", "Annual forbs (high)", "Annual forbs (low)", "Annual forbs (low)",
"Control", "Control")
ul_split$plot_names <- rep(plot_names, 6)
#Graph of all the plots and total cover - split invasive and native
ul_split %>%
ggplot(aes(x = plot_names, y = PC, color = Status)) +
stat_summary(aes(group = Status),
fun = mean, geom = "point", size = 2) +
stat_summary(aes(group = Status, width = 0),
fun.data = mean_se, geom = "errorbar", size = 1) +
labs(x = "Functional Group", y = "Cover (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9)) +
ggtitle("Utah Lake") +
ylim(0, 100)
ggsave("ul_invasive_native.jpeg",
device = jpeg)
