+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m1)
mdf.m2 <- glmmTMB(log(Cover.Phrag) ~ Native.Biomass * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m1)
mdf.m1 <- glmmTMB(log(Phrag.Biomass) ~ Cover.Native * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
mdf.m3 <- glmmTMB(log(Phrag.Biomass) ~ Cover.Native * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m3)
mdf.m4 <- glmmTMB(log(Cover.Phrag) ~ Cover.Native * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m1)
mdf.m1 <- glmmTMB(log(Phrag.Biomass) ~ Native.Biomass * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= useData$Density) #must have data for every factor level
plotResiduals(mdf.m1) #must have data for every factor level
plotResiduals(mdf.m1, form= final.all$Density)
final.all$Density
mdf.m1
unique(final.all$Native.Biomass)
#Native biomass
table(biomass$Species)
mdf <- biomass %>%
dplyr::filter(!is.na(Density),
Species != "JUTO" & Species != "JUGE"  & Species != "SCAM" & Species != "BOMA" & Species != "SYCI") %>%
dplyr::mutate(Species = factor(Species)) #need to remove the factor levels (species) that were removed
table(mdf$Species)
with(mdf, table(Species, Density, Phrag_Presence, useNA = "ifany"))
mdf_avg <- mdf %>%
dplyr::group_by(Block, Phrag_Presence, Density, Species) %>%
dplyr::summarize(Native.Biomass = mean(Native.Biomass),
nobs = dplyr::n()) %>%#to average the BICE where there is an extra observation
dplyr::ungroup()
table(mdf_avg$nobs) #double check to make sure BICE is the only one with 2 observations
summary(mdf_avg$Native.Biomass) #no 0s so log shouldnt be a problem
mdf.m1 <- glmmTMB(sqrt(Phrag.Biomass) ~ Native.Biomass * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= final.all$Density)
View(final.all)
table(finall.all$Species)
table(final.all$Species)
table(final.all$Species, Native.Biomass)
table(final.all$Species)
#need to remove the species with NAs as I did before
final.all <- final.all %>%
filter(Species != "JUTO" & Species != "JUGE"  & Species != "SCAM" &
Species != "BOMA"& Species != "SYCI"))
#need to remove the species with NAs as I did before
final.all <- final.all %>%
filter(Species != "JUTO" & Species != "JUGE"  & Species != "SCAM" &
Species != "BOMA"& Species != "SYCI")
table(final.all)
table(final.all$Species)
mdf.m1 <- glmmTMB(sqrt(Phrag.Biomass) ~ Native.Biomass * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= final.all$Density)
final.all$Species <- as.factor(final.all$Species)
final.all$Density <- as.factor(final.all$Density)
final.all$Group <- as.factor(final.all$Group)
mdf.m1 <- glmmTMB(sqrt(Phrag.Biomass) ~ Native.Biomass * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= final.all$Density)
mdf.m1 <- glmmTMB(log(Phrag.Biomass) ~ Native.Biomass * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= final.all$Density)
mdf.m1 <- glmmTMB(sqrt(Phrag.Biomass) ~ Native.Biomass * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
mdf.m2 <- glmmTMB(log(Cover.Phrag) ~ Native.Biomass * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m2)
simulateResiduals(mdf.m2, plot = T)
plotResiduals(mdf.m2, form= final.all$Density)
mdf.m2 <- glmmTMB(sqrt(Cover.Phrag) ~ Native.Biomass * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
simulateResiduals(mdf.m2, plot = T)
plotResiduals(mdf.m2, form= final.all$Density)
summary(mdf.m2)
mdf.m1 <- glmmTMB(sqrt(Phrag.Biomass) ~ Native.Biomass * Group * Density
+ (1|Block),
data = final.all,
family = beta_family
)
mdf.m3 <- glmmTMB(log(Phrag.Biomass) ~ Cover.Native * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
mdf.m3 <- glmmTMB(log(Phrag.Biomass) ~ Cover.Native * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m3)
simulateResiduals(mdf.m2, plot = T) #fit isn't great
plotResiduals(mdf.m2, form= final.all$Density)
simulateResiduals(mdf.m3, plot = T) #fit isn't great
plotResiduals(mdf.m3, form= final.all$Density)
mdf.m4 <- glmmTMB(log(Cover.Phrag) ~ Cover.Native * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
unique(final.all$Cover.Native)
mdf.m3 <- glmmTMB(log(Phrag.Biomass) ~ Cover.Native + Group + Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m3)
simulateResiduals(mdf.m3, plot = T) #fit isn't great
plotResiduals(mdf.m3, form= final.all$Density)
mdf.m3 <- glmmTMB(sqrt(Phrag.Biomass) ~ Cover.Native + Group + Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m3)
simulateResiduals(mdf.m3, plot = T) #fit isn't great
plotResiduals(mdf.m3, form= final.all$Density)
mdf.m3 <- glmmTMB(sqrt(Phrag.Biomass) ~ Cover.Native * Group + Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m3)
mdf.m3 <- glmmTMB(sqrt(Phrag.Biomass) ~ Cover.Native * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
mdf.m3 <- glmmTMB(sqrt(Phrag.Biomass) ~ Cover.Native * Density + Group
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m3)
mdf.m3 <- glmmTMB(sqrt(Phrag.Biomass) ~ Cover.Native * Group + Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m3)
simulateResiduals(mdf.m3, plot = T)
plotResiduals(mdf.m3, form= final.all$Density)
mdf.m3 <- glmmTMB(sqrt(Phrag.Biomass) ~ Cover.Native * Density + Group
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m3)
simulateResiduals(mdf.m3, plot = T)
plotResiduals(mdf.m3, form= final.all$Density)
mdf.m5 <- glmmTMB(log(Cover.Phrag) ~ Cover.Native * Group + Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m5)
simulateResiduals(mdf.m5, plot = T) #fit isn't great
mdf.m5 <- glmmTMB(sqrt(Cover.Phrag) ~ Cover.Native * Group + Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m5)
simulateResiduals(mdf.m5, plot = T) #fit isn't great
plotResiduals(mdf.m5, form= final.all$Density)
mdf.m6 <- glmmTMB(sqrt(Cover.Phrag) ~ Cover.Native * Density + Group
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m6)
simulateResiduals(mdf.m6, plot = T) #fit isn't great
plotResiduals(mdf.m6, form= final.all$Density)
mdf.m6 <- glmmTMB(log(Cover.Phrag) ~ Cover.Native * Density + Group
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m6)
simulateResiduals(mdf.m6, plot = T)
plotResiduals(mdf.m6, form= final.all$Density)
mdf.m1 <- glmmTMB(sqrt(Phrag.Biomass) ~ Native.Biomass * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= final.all$Density)
Anova(mdf.m1)
#no three way interaction
#interaction between biomass & group and group & density
emmip(mdf.m1, Native.Biomass~Density, CIs = T)
#no three way interaction
#interaction between biomass & group and group & density
emmip(mdf.m1, Native.Biomass~Group, CIs = T)
#no three way interaction
#interaction between biomass & group and group & density
emmip(mdf.m1, Native.Biomass~Group|Density, CIs = T)
#no three way interaction
#interaction between biomass & group and group & density
emmip(mdf.m1, Native.Biomass~Density|Group, CIs = T)
emmeans(mdf.m1, pairwise ~ Native.Biomass|Group)
emmeans(mdf.m1, pairwise ~ Native.Biomass|Density)
emmeans(mdf.m1, pairwise ~ Native.Biomass|Density, type = "resonse", adjust = "tukey")
emmeans(mdf.m1, pairwise ~ Native.Biomass|Density, type = "resonse", adjust = "tukey")
emmeans(mdf.m1, pairwise ~ Native.Biomass|Density, type = "response", adjust = "tukey")
#no three way interaction
#interaction between biomass & group and group & density
emmip(mdf.m1, Native.Biomass~Density|Group, CIs = T)
emmeans(mdf.m1, ~Native.Biomass*Density*Group)
emmeans(mdf.m1, ~Native.Biomass*Density*Group, type = "response")
library(tidyverse)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
greenhouse$Density <- as.factor(greenhouse$Density)
greenhouse$Phrag_Presence <- as.factor(greenhouse$Phrag_Presence)
greenhouse$Species <- as.factor(greenhouse$Species)
options(contrasts = c("contr.sum", "contr.poly"))
#Native cover
mdf <- greenhouse %>%
dplyr::filter(!is.na(Density),
Date_Cleaned == "2022-05-16",
Species != "JUTO" & Species != "JUGE"  & Species != "SCAM" & Species != "BOMA"& Species != "SYCI")
mdf$Cover.Native[mdf$Cover.Native == 0] <- 0.005 #make 0s a trace amount - could be half the smallest amount
mdf.m1<- glmmTMB(Cover.Native ~ Phrag_Presence * Density * Species  #* for interaction
+ (1|Block),
data = mdf,
family = beta_family)
summary(mdf.m1)
mdf.m1_res <- simulateResiduals(mdf.m1, plot = T)
Anova(mdf.m1, type = 3)
emmip(mdf.m1, Species~Density|Phrag_Presence, CIs = T)
emmip(mdf.m1, Phrag_Presence~Density|Species, CIs = T)
#Native biomass
table(biomass$Species)
mdf <- biomass %>%
dplyr::filter(!is.na(Density),
Species != "JUTO" & Species != "JUGE"  & Species != "SCAM" & Species != "BOMA" & Species != "SYCI") %>%
dplyr::mutate(Species = factor(Species)) #need to remove the factor levels (species) that were removed
table(mdf$Species)
with(mdf, table(Species, Density, Phrag_Presence, useNA = "ifany"))
mdf_avg <- mdf %>%
dplyr::group_by(Block, Phrag_Presence, Density, Species) %>%
dplyr::summarize(Native.Biomass = mean(Native.Biomass),
nobs = dplyr::n()) %>%#to average the BICE where there is an extra observation
dplyr::ungroup()
table(mdf_avg$nobs) #double check to make sure BICE is the only one with 2 observations
summary(mdf_avg$Native.Biomass) #no 0s so log shouldnt be a problem
mdf.m1 <- glmmTMB(sqrt(Native.Biomass) ~ Phrag_Presence * Density * Species #* for interaction
+ (1|Block),
data = mdf_avg
)
summary(mdf.m1)
mdf.m1_res <- simulateResiduals(mdf.m1, plot = T)
useData <- drop_na(mdf_avg) #need to get rid of NAs
plotResiduals(mdf.m1_res, form= useData$Phrag_Presence)
#warning message because Phrag_Presence is a character, but it runs
#slight difference but good enough
plotResiduals(mdf.m1_res, form= useData$Density)
#variance slightly less in low density but again good enough
plotResiduals(mdf.m1_res, form= useData$Species)
#this is messier, fewer observations for each, some boxplots bigger than others, but only 12 observations
#species have different variances that the transformation doesn't stabilize
#library(car)
Anova(mdf.m1, type = 3)
#there is evidence of a significant 3-way interaction - other interactions not interpretable because of 3 way
emmip(mdf.m1, Species~Density|Phrag_Presence, CIs = T)
emmip(mdf.m1, Phrag_Presence~Density|Species, CIs = T)
#now we test for all the pieces
#we want to know which species have an interaction and which don't, and which might have one effect
#then we want to know whether the interaction pattern is the same for each species
mdf.m1.emm <- emmeans(mdf.m1, ~Species * Density * Phrag_Presence)
pairs(mdf.m1.emm, by = c("Density", "Phrag_Presence"))
pairs(mdf.m1.emm, simple = "Species")
mdf.m1.emm <- emmeans(mdf.m1, ~Native.Biomass*Density*Group, type = "response")
mdf.m1.emm <- emmeans(mdf.m1, ~Native.Biomass*Density*Group, type = "response")
mdf.m1 <- glmmTMB(sqrt(Phrag.Biomass) ~ Native.Biomass * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
mdf.m1.emm <- emmeans(mdf.m1, ~Native.Biomass*Density*Group, type = "response")
pairs(mdf.m1.emm, by = c("Density", "Group"))
pairs(mdf.m1.emm, by = "Density")
pairs(mdf.m1.emm, by = "Group")
final.all$Cover.Phrag <- final.all$Cover.Phrag * 100
final.all$Cover.Native <- final.all$Cover.Native * 100
mdf.m2 <- glmmTMB(sqrt(Cover.Phrag) ~ Cover.Native * Group + Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m2)
simulateResiduals(mdf.m2, plot = T) #fit isn't great
plotResiduals(mdf.m2, form= final.all$Density)
simulateResiduals(mdf.m2, plot = T) #fit isn't great
mdf.m2 <- glmmTMB(log(Cover.Phrag) ~ Cover.Native * Group + Density
+ (1|Block),
data = final.all,
family = gaussian
)
summary(mdf.m2)
simulateResiduals(mdf.m2, plot = T) #fit isn't great
plotResiduals(mdf.m2, form= final.all$Density)
mdf.m2 <- glmmTMB(sqrt(Cover.Phrag) ~ Cover.Native * Group * Density
+ (1|Block),
data = final.all,
family = gaussian
)
#Call objects
load("main_dfs.RData")
load("clean_dfs.RData")
library(tidyverse)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
fb$Group <- as.factor(fb$Group)
fb$Density <- as.factor(fb$Density)
ul$Group <- as.factor(ul$Group)
ul$Density <- as.factor(ul$Density)
#only need the last date
mdf <- fb %>%
filter(Date == "2022-09-16") %>%
select(Block, Group, Density, Date, Invasive.Cover, Native.Cover)
##fb ####
fb2 <-fb %>%
dplyr::select(Block, Plot, Group, Density, Date, PHAU, Cheno, Typha,
BOMA, DISP, EUMA, SYCI, LEFA, SCAC, BICE, BIFR, EUOC, MUAS, SCAM, RUMA,
RUST, Unk_Bulrush, SARU, Tamarisk) %>%  #remove unnecessary columns
filter(Date == "2022-09-16") %>%  #only the last sampling date
pivot_longer(
cols = 6:24,
names_to = "SPP",
values_to = "Percent_Cover"
) %>% #pivot so that all species names are in one column
mutate(Status = case_when(
SPP %in% c("PHAU", "TYPHA", "RUST", "Tamarisk") ~ "Invasive",
SPP %in% c("BOMA", "SCAC", "SCAM") & Group == 4 ~ "Seeded",
SPP %in% c("DISP", "MUAS") & Group == 3 ~ "Seeded",
SPP %in% c("EUOC", "EUMA") & Group == 1 ~ "Seeded",
SPP %in% c("SYCI", "BICE", "RUMA") & Group == 5 ~ "Seeded",
TRUE ~ "Native"))%>%  #make a new column for species status
group_by(Block, Plot, Density, Group, Status) %>% #group by the plot and species status
summarise(PC = sum(Percent_Cover, na.rm = TRUE)) %>%  #calculate totals
pivot_wider(names_from = Status,
values_from = PC) %>%  #make wide again
filter(Density != "C") #idk I did this before, I think to converge
#remove NAs and 0s - make one half the smallest value
fb2$Seeded[fb2$Seeded %in% c(0, NA)] <- 0.0025
fb2$Group <- factor(fb2$Group)
fb2$Density <- factor(fb2$Density)
mdf.m1 <- glmmTMB(log(Seeded) ~ Group * Density #* for interaction
+ (1|Block),
data = fb2,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m1) #don't use this summary
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= useData$Density) #must have data for every factor level
emmip(mdf.m1, Group~Density, CIs = T)
car::Anova(mdf.m1)
emmeans(mdf.m1, pairwise~Group, type = 'response', adjust = 'tukey')
#significant differences between groups -
#perennial forb and juncus are similar,
#annual forb and grass are similar,
#grass and bulrush are similar
emmeans(mdf.m1, pairwise~Density, type = "response", adjust = "tukey")
emmeans(mdf.m1, pairwise~Group, type = 'response', adjust = 'tukey')
###how to add the letters to a graph ####
library(multcomp)
emm1 <- emmeans(mdf.m1, pairwise~Group, CIs = T, type = 'response', adjust = 'tukey')
data1 <- multcomp::cld(emm1, alpha = 0.1, Letters = letters)
ggplot(data = data1, aes(x = Group, y = response * 100)) +
geom_point(size=2) +
geom_errorbar(aes(ymin = 100*(response - SE),
ymax = 100*(response+SE)),
width=0, size=0.5) +
labs(x="Seed Mix", y = "Model predicted percent cover") +
geom_text(aes(label = .group,  y = response * 100),
nudge_x = 0.2)
emm2 <- emmeans(mdf.m1, pairwise~Density, CIs = T, type = 'response', adjust = 'tukey')
data2 <- multcomp::cld(emm2, alpha = 0.1, Letters = letters)
ggplot(data = data2, aes(x = Density, y = response * 100)) +
geom_point(size=2) +
geom_errorbar(aes(ymin = 100*(response - SE),
ymax = 100*(response+SE)),
width=0, size=0.5) +
labs(x="Density", y = "Model predicted percent cover") +
geom_text(aes(label = .group,  y = response * 100),
nudge_x = 0.2)
##ul ####
ul2 <- ul%>%
dplyr::select(Block, Plot, Group, Density, Date, PHAU, BOMA, BICE, CYER, RUMA,
Cheno, SCAC, SCPU, SCAM, DISP, RACY, ASIN, ALPR, CYDA, Unk_Bulrush, BY, SYCI,
EUOC, TYPHA, Tamarisk, POPE, POFR, SAAM, BASC, LASE) %>%
filter(Date == "2022-09-16") %>%
pivot_longer(
cols = 6:30,
names_to = "SPP",
values_to = "Percent_Cover"
) %>%
mutate(Status = case_when(
SPP %in% c("PHAU", "TYPHA", "RUST",
"Tamarisk", "ALPR", "CYDA", "BY",
"BASC", "LASE") ~ "Invasive",
SPP %in% c("BOMA", "SCAC", "SCAM") & Group == 4 ~ "Seeded",
SPP == "DISP" & Group == 3 ~ "Seeded",
SPP == "EUOC" & Group == 1 ~ "Seeded",
SPP %in% c("SYCI", "BICE", "RUMA") & Group == 5 ~ "Seeded",
TRUE ~ "Native"
))%>%
mutate(Plot = case_when(
Plot == "1H" ~ "Perennial forbs (high)",
Plot == "1L" ~ "Perennial forbs (low)",
Plot == "2H" ~ "Rushes (high)",
Plot == "2L" ~ "Rushes (low)",
Plot == "3H" ~ "Grasses (high)",
Plot == "3L" ~ "Grasses (low)",
Plot == "4H" ~ "Bulrushes (high)",
Plot == "4L" ~ "Bulrushes (low)",
Plot == "5H" ~ "Annual forbs (high)",
Plot == "5L" ~ "Annual forbs (low)",
Plot == "C" ~ "Control",
TRUE ~ "PROBLEM"
)) %>%  #make a new column for species status
group_by(Block, Plot, Density, Group, Status) %>% #group by the plot and species status
summarise(PC = sum(Percent_Cover, na.rm = TRUE)) %>%  #calculate totals
pivot_wider(names_from = Status,
values_from = PC) %>%  #make wide again
filter(Density != "C") #idk I did this before, I think to converge
#remove NAs and 0s - make one half the smallest value
ul2$Seeded[ul2$Seeded %in% c(0, NA)] <- 0.025
ul2$Group <- factor(ul2$Group)
ul2$Density <- factor(ul2$Density)
mdf.m2 <- glmmTMB(log(Seeded) ~ Group * Density #* for interaction
+ (1|Block),
data = ul2,
family = gaussian, #because cover
control = glmmTMBControl(optimizer = optim,
optArgs = list(method="BFGS"))
)
summary(mdf.m2) #don't use this summary
simulateResiduals(mdf.m2, plot = T)
plotResiduals(mdf.m2, form= useData$Density) #must have data for every factor level
emmip(mdf.m2, Group~Density, CIs = T)
car::Anova(mdf.m2)
#Group and density significant with one interaction
#In general, annual forbs and bulrushes higher
#In general, high density higher
#Interaction must be in grass, which is much higher in high than low whereas other groups are mostly the same
emmeans(mdf.m2, pairwise~Group|Density, type = 'response', adjust = 'tukey')
